{"version":3,"sources":["webpack://qzPrinty/webpack/universalModuleDefinition","webpack://qzPrinty/webpack/bootstrap","webpack://qzPrinty/./node_modules/qz-tray/qz-tray.js","webpack://qzPrinty/./node_modules/process/browser.js","webpack://qzPrinty/(webpack)/buildin/global.js","webpack://qzPrinty/./node_modules/rsvp/dist/rsvp.es.js","webpack://qzPrinty/./node_modules/sha256/lib/sha256.js","webpack://qzPrinty/./src/index.js","webpack://qzPrinty/./node_modules/timers-browserify/main.js","webpack://qzPrinty/./node_modules/setimmediate/setImmediate.js","webpack://qzPrinty/./node_modules/convert-hex/convert-hex.js","webpack://qzPrinty/./node_modules/convert-string/convert-string.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","qz","Array","isArray","arg","toString","_qz","VERSION","DEBUG","log","trace","console","apply","arguments","info","warn","error","streams","serial","usb","hid","websocket","connection","connectConfig","host","hostIndex","usingSecure","protocol","secure","insecure","port","portIndex","keepAlive","retries","delay","setup","findConnection","config","resolve","reject","length","Error","address","deeper","tools","ws","err","established","onopen","evt","openConnection","interval","setInterval","isActive","send","clearInterval","onclose","navigator","userAgent","indexOf","onerror","openPromise","sendCert","cert","undefined","sendData","certificate","promise","uid","callClose","pendingCalls","callError","obj","timestamp","Date","now","getTime","newUID","position","x","screen","availWidth","width","left","availLeft","y","availHeight","height","top","availTop","signature","signObj","params","hashing","hash","stringify","then","hashed","security","callSign","signContent","onmessage","returned","JSON","parse","data","result","type","close","event","portName","output","callSerial","vendorId","productId","callUsb","callHid","callCert","catch","len","join","Math","random","pow","slice","dataPromise","callName","signingTimestamp","msg","errorCallbacks","closedCallbacks","printing","defaultConfig","colorType","copies","density","duplex","fallbackDensity","interpolation","jobName","legacy","margins","orientation","paperThickness","printerTray","rasterize","rotation","scaleContent","size","units","altPrinting","encoding","endOfDoc","perSpool","serialCallbacks","streamEvent","usbCallbacks","hidCallbacks","certPromise","signaturePromise","toSign","resolver","RSVP","Promise","pjson","toJSON","Sha256","WebSocket","absolute","loc","document","createElement","a","href","extend","target","source","clone","constructor","Config","printer","opts","this","setPrinter","newPrinter","getPrinter","reconfigure","newOpts","getOptions","print","connect","options","CLOSED","location","attempt","count","tried","nextAttempt","delayed","setTimeout","disconnect","setErrorCallbacks","calls","setClosedCallbacks","getNetworkInfo","hostname","getConnectionInfo","url","split","socket","printers","getDefault","find","query","configs","setDefaults","format","toUpperCase","overlay","findPorts","setSerialCallbacks","openPort","properties","closePort","listDevices","includeHubs","listInterfaces","deviceInfo","listEndpoints","interface","setUsbCallbacks","claimDevice","isClaimed","endpoint","readData","responseSize","openStream","closeStream","releaseDevice","startListening","stopListening","setHidCallbacks","setCertificatePromise","promiseCall","setSignaturePromise","promiseGen","api","showDebug","show","getVersion","setPromiseType","promiser","setSha256Type","hasher","setWebSocketType","version","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","e","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","args","push","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","g","Function","setImmediate","callbacksFor","callbacks","_promiseCallbacks","EventTarget","mixin","eventName","callback","TypeError","allCallbacks","index","splice","trigger","label","instrument","configure","child","payload","_guidKey","id","_id","detail","_result","childId","_label","timeStamp","entry","guid","childGuid","stack","resolve$1","PENDING","FULFILLED","REJECTED","TRY_CATCH_ERROR","getThen","tryCatchCallback","tryCatcher","tryCatch","fn","handleMaybeThenable","maybeThenable","then$$1","thenable","_state","fulfill","_onError","subscribe","reason","handleOwnThenable","async","sealed","handleForeignThenable","publishRejection","publish","_subscribers","parent","onFulfillment","onRejection","subscribers","settled","invokeCallback","state","hasCallback","Enumerator","Constructor","input","abortOnReject","_instanceConstructor","_abortOnReject","_isUsingOwnPromise","_isUsingOwnResolve","_init","_remaining","_enumerate","_eachEntry","_checkFullfillment","_settleMaybeThenable","firstPass","_settledAt","_willSettleAt","resolve$$1","_setResultAt","_this","setSettledResult","guidKey","counter","needsResolver","resolved","initializePromise","needsNew","after","finally","wrapThenable","onFulFillment","handleValueInput","nodeFunc","self","needsPromiseInput","all","entries","race","AllSettled","_Enumerator","ReferenceError","_possibleConstructorReturn","subClass","superClass","writable","configurable","setPrototypeOf","__proto__","_inherits","PromiseHash","_possibleConstructorReturn$1","_inherits$1","results","HashSettled","_PromiseHash","_possibleConstructorReturn$2","_inherits$2","MapEnumerator","mapFn","_possibleConstructorReturn$3","_inherits$3","bool","_mapFn","val","EMPTY_OBJECT","FilterEnumerator","filterFn","_possibleConstructorReturn$4","_inherits$4","_filterFn","filter","vertxNext","asap","queue$1","scheduleFlush$1","browserWindow","browserGlobal","BrowserMutationObserver","MutationObserver","WebKitMutationObserver","isNode","isWorker","Uint8ClampedArray","importScripts","MessageChannel","useSetTimeout","flush","channel","iterations","observer","node","_asap$Promise$EventTa","_defineProperty","match","createTextNode","observe","characterData","port1","port2","postMessage","vertx","runOnLoop","runOnContext","attemptVertex","cb","rsvp","allSettled","hashSettled","rethrow","defer","deferred","denodeify","promiseInput","_","arrayResult","argumentNames","makeObject","handlePromiseInput","map","promises","__webpack_exports__","globals","_imports","bytesToHex","convertString","sha256","convertHex","K","isPrime","sqrtN","sqrt","factor","getFractionalBits","nPrime","bytesToWords","bytes","words","b","wordsToBytes","W","processBlock","H","M","offset","f","h","gamma0x","gamma0","gamma1x","gamma1","maj","sigma0","t1","message","String","UTF8","stringToBytes","digestbytes","asBytes","asString","bytesToString","x2","qzPrinty","rsvp__WEBPACK_IMPORTED_MODULE_0__","sha256__WEBPACK_IMPORTED_MODULE_1__","sha256__WEBPACK_IMPORTED_MODULE_1___default","qz_tray__WEBPACK_IMPORTED_MODULE_2__","qz_tray__WEBPACK_IMPORTED_MODULE_2___default","defaults","settings","[object Object]","assign","init","forEach","el","global","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","registerImmediate","html","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","getPrototypeOf","handle","runIfPresent","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","documentElement","script","onreadystatechange","removeChild","appendChild","addEventListener","attachEvent","task","orig","arrBytesToHex","hexToBytes","hex","parseInt","fromCharCode","str","charCodeAt","decodeURIComponent","escape","unescape","encodeURIComponent"],"mappings":"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","file":"build.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"qzPrinty\"] = factory();\n\telse\n\t\troot[\"qzPrinty\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","'use strict';\n\n/**\n * @version 2.0.8;\n * @overview QZ Tray Connector\n * <p/>\n * Connects a web client to the QZ Tray software.\n * Enables printing and device communication from javascript.\n *\n * @requires RSVP\n *     Provides Promises/A+ functionality for API calls.\n *     Can be overridden via <code>qz.api.setPromiseType</code> to remove dependency.\n * @requires Sha256\n *     Provides hashing algorithm for signing messages.\n *     Can be overridden via <code>qz.api.setSha256Type</code> to remove dependency.\n */\nvar qz = (function() {\n\n///// POLYFILLS /////\n\n    if (!Array.isArray) {\n        Array.isArray = function(arg) {\n            return Object.prototype.toString.call(arg) === '[object Array]';\n        };\n    }\n\n\n///// PRIVATE METHODS /////\n\n    var _qz = {\n        VERSION: \"2.0.8\",                              //must match @version above\n        DEBUG: false,\n\n        log: {\n            /** Debugging messages */\n            trace: function() { if (_qz.DEBUG) { console.log.apply(console, arguments); } },\n            /** General messages */\n            info: function() { console.info.apply(console, arguments); },\n            /** Debugging errors */\n            warn: function() { if (_qz.DEBUG) { console.warn.apply(console, arguments); } },\n            /** General errors */\n            error: function() { console.error.apply(console, arguments); }\n        },\n\n\n        //stream types\n        streams: {\n            serial: 'SERIAL', usb: 'USB', hid: 'HID'\n        },\n\n\n        websocket: {\n            /** The actual websocket object managing the connection. */\n            connection: null,\n\n            /** Default parameters used on new connections. Override values using options parameter on {@link qz.websocket.connect}. */\n            connectConfig: {\n                host: [\"localhost\", \"localhost.qz.io\"], //hosts QZ Tray can be running on\n                hostIndex: 0,                           //internal var - index on host array\n                usingSecure: true,                      //boolean use of secure protocol\n                protocol: {\n                    secure: \"wss://\",                   //secure websocket\n                    insecure: \"ws://\"                   //insecure websocket\n                },\n                port: {\n                    secure: [8181, 8282, 8383, 8484],   //list of secure ports QZ Tray could be listening on\n                    insecure: [8182, 8283, 8384, 8485], //list of insecure ports QZ Tray could be listening on\n                    portIndex: 0                        //internal var - index on active port array\n                },\n                keepAlive: 60,                          //time between pings to keep connection alive, in seconds\n                retries: 0,                             //number of times to reconnect before failing\n                delay: 0                                //seconds before firing a connection\n            },\n\n            setup: {\n                /** Loop through possible ports to open connection, sets web socket calls that will settle the promise. */\n                findConnection: function(config, resolve, reject) {\n                    //force flag if missing ports\n                    if (!config.port.secure.length) {\n                        if (!config.port.insecure.length) {\n                            reject(new Error(\"No ports have been specified to connect over\"));\n                            return;\n                        } else if (config.usingSecure) {\n                            _qz.log.error(\"No secure ports specified - forcing insecure connection\");\n                            config.usingSecure = false;\n                        }\n                    } else if (!config.port.insecure.length && !config.usingSecure) {\n                        _qz.log.trace(\"No insecure ports specified - forcing secure connection\");\n                        config.usingSecure = true;\n                    }\n\n                    var deeper = function() {\n                        config.port.portIndex++;\n\n                        if ((config.usingSecure && config.port.portIndex >= config.port.secure.length)\n                            || (!config.usingSecure && config.port.portIndex >= config.port.insecure.length)) {\n                            if (config.hostIndex >= config.host.length - 1) {\n                                //give up, all hope is lost\n                                reject(new Error(\"Unable to establish connection with QZ\"));\n                                return;\n                            } else {\n                                config.hostIndex++;\n                                config.port.portIndex = 0;\n                            }\n                        }\n\n                        // recursive call until connection established or all ports are exhausted\n                        _qz.websocket.setup.findConnection(config, resolve, reject);\n                    };\n\n                    var address;\n                    if (config.usingSecure) {\n                        address = config.protocol.secure + config.host[config.hostIndex] + \":\" + config.port.secure[config.port.portIndex];\n                    } else {\n                        address = config.protocol.insecure + config.host[config.hostIndex] + \":\" + config.port.insecure[config.port.portIndex];\n                    }\n\n                    try {\n                        _qz.log.trace(\"Attempting connection\", address);\n                        _qz.websocket.connection = new _qz.tools.ws(address);\n                    }\n                    catch(err) {\n                        _qz.log.error(err);\n                        deeper();\n                        return;\n                    }\n\n                    if (_qz.websocket.connection != null) {\n                        _qz.websocket.connection.established = false;\n\n                        //called on successful connection to qz, begins setup of websocket calls and resolves connect promise after certificate is sent\n                        _qz.websocket.connection.onopen = function(evt) {\n                            if (!_qz.websocket.connection.established) {\n                                _qz.log.trace(evt);\n                                _qz.log.info(\"Established connection with QZ Tray on \" + address);\n\n                                _qz.websocket.setup.openConnection({ resolve: resolve, reject: reject });\n\n                                if (config.keepAlive > 0) {\n                                    var interval = setInterval(function() {\n                                        if (!qz.websocket.isActive()) {\n                                            clearInterval(interval);\n                                            return;\n                                        }\n\n                                        _qz.websocket.connection.send(\"ping\");\n                                    }, config.keepAlive * 1000);\n                                }\n                            }\n                        };\n\n                        //called during websocket close during setup\n                        _qz.websocket.connection.onclose = function() {\n                            // Safari compatibility fix to raise error event\n                            if (_qz.websocket.connection && typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {\n                                _qz.websocket.connection.onerror();\n                            }\n                        };\n\n                        //called for errors during setup (such as invalid ports), reject connect promise only if all ports have been tried\n                        _qz.websocket.connection.onerror = function(evt) {\n                            _qz.log.trace(evt);\n\n                            _qz.websocket.connection = null;\n\n                            deeper();\n                        };\n                    } else {\n                        reject(new Error(\"Unable to create a websocket connection\"));\n                    }\n                },\n\n                /** Finish setting calls on successful connection, sets web socket calls that won't settle the promise. */\n                openConnection: function(openPromise) {\n                    _qz.websocket.connection.established = true;\n\n                    //called when an open connection is closed\n                    _qz.websocket.connection.onclose = function(evt) {\n                        _qz.log.trace(evt);\n                        _qz.log.info(\"Closed connection with QZ Tray\");\n\n                        //if this is set, then an explicit close call was made\n                        if (_qz.websocket.connection.promise != undefined) {\n                            _qz.websocket.connection.promise.resolve();\n                        }\n\n                        _qz.websocket.callClose(evt);\n                        _qz.websocket.connection = null;\n\n                        for(var uid in _qz.websocket.pendingCalls) {\n                            if (_qz.websocket.pendingCalls.hasOwnProperty(uid)) {\n                                _qz.websocket.pendingCalls[uid].reject(new Error(\"Connection closed before response received\"));\n                            }\n                        }\n                    };\n\n                    //called for any errors with an open connection\n                    _qz.websocket.connection.onerror = function(evt) {\n                        _qz.websocket.callError(evt);\n                    };\n\n                    //send JSON objects to qz\n                    _qz.websocket.connection.sendData = function(obj) {\n                        _qz.log.trace(\"Preparing object for websocket\", obj);\n\n                        if (obj.timestamp == undefined) {\n                            obj.timestamp = Date.now();\n                            if (typeof obj.timestamp !== 'number') {\n                                obj.timestamp = new Date().getTime();\n                            }\n                        }\n                        if (obj.promise != undefined) {\n                            obj.uid = _qz.websocket.setup.newUID();\n                            _qz.websocket.pendingCalls[obj.uid] = obj.promise;\n                        }\n\n                        // track requesting monitor\n                        obj.position = {\n                            x: screen ? ((screen.availWidth || screen.width) / 2) + (screen.left || screen.availLeft) : 0,\n                            y: screen ? ((screen.availHeight || screen.height) / 2) + (screen.top || screen.availTop) : 0\n                        };\n\n                        try {\n                            if (obj.call != undefined && obj.signature == undefined) {\n                                var signObj = {\n                                    call: obj.call,\n                                    params: obj.params,\n                                    timestamp: obj.timestamp\n                                };\n\n                                //make a hashing promise if not already one\n                                var hashing = _qz.tools.hash(_qz.tools.stringify(signObj));\n                                if (!hashing.then) {\n                                    hashing = _qz.tools.promise(function(resolve) {\n                                        resolve(hashing);\n                                    });\n                                }\n\n                                hashing.then(function(hashed) {\n                                    return _qz.security.callSign(hashed);\n                                }).then(function(signature) {\n                                    _qz.log.trace(\"Signature for call\", signature);\n                                    obj.signature = signature;\n                                    _qz.signContent = undefined;\n                                    _qz.websocket.connection.send(_qz.tools.stringify(obj));\n                                });\n                            } else {\n                                _qz.log.trace(\"Signature for call\", obj.signature);\n\n                                //called for pre-signed content and (unsigned) setup calls\n                                _qz.websocket.connection.send(_qz.tools.stringify(obj));\n                            }\n                        }\n                        catch(err) {\n                            _qz.log.error(err);\n\n                            if (obj.promise != undefined) {\n                                obj.promise.reject(err);\n                                delete _qz.websocket.pendingCalls[obj.uid];\n                            }\n                        }\n                    };\n\n                    //receive message from qz\n                    _qz.websocket.connection.onmessage = function(evt) {\n                        var returned = JSON.parse(evt.data);\n\n                        if (returned.uid == null) {\n                            if (returned.type == null) {\n                                //incorrect response format, likely connected to incompatible qz version\n                                _qz.websocket.connection.close(4003, \"Connected to incompatible QZ Tray version\");\n\n                            } else {\n                                //streams (callbacks only, no promises)\n                                switch(returned.type) {\n                                    case _qz.streams.serial:\n                                        if (!returned.event) {\n                                            returned.event = JSON.stringify({ portName: returned.key, output: returned.data });\n                                        }\n\n                                        _qz.serial.callSerial(JSON.parse(returned.event));\n                                        break;\n                                    case _qz.streams.usb:\n                                        if (!returned.event) {\n                                            returned.event = JSON.stringify({ vendorId: returned.key[0], productId: returned.key[1], output: returned.data });\n                                        }\n\n                                        _qz.usb.callUsb(JSON.parse(returned.event));\n                                        break;\n                                    case _qz.streams.hid:\n                                        _qz.hid.callHid(JSON.parse(returned.event));\n                                        break;\n                                    default:\n                                        _qz.log.warn(\"Cannot determine stream type for callback\", returned);\n                                        break;\n                                }\n                            }\n\n                            return;\n                        }\n\n                        _qz.log.trace(\"Received response from websocket\", returned);\n\n                        var promise = _qz.websocket.pendingCalls[returned.uid];\n                        if (promise == undefined) {\n                            _qz.log.warn('No promise found for returned response');\n                        } else {\n                            if (returned.error != undefined) {\n                                promise.reject(new Error(returned.error));\n                            } else {\n                                promise.resolve(returned.result);\n                            }\n                        }\n\n                        delete _qz.websocket.pendingCalls[returned.uid];\n                    };\n\n\n                    //send up the certificate before making any calls\n                    //also gives the user a chance to deny the connection\n                    function sendCert(cert) {\n                        if (cert === undefined) { cert = null; }\n                        _qz.websocket.connection.sendData({ certificate: cert, promise: openPromise });\n                    }\n\n                    _qz.security.callCert().then(sendCert).catch(sendCert);\n                },\n\n                /** Generate unique ID used to map a response to a call. */\n                newUID: function() {\n                    var len = 6;\n                    return (new Array(len + 1).join(\"0\") + (Math.random() * Math.pow(36, len) << 0).toString(36)).slice(-len)\n                }\n            },\n\n            dataPromise: function(callName, params, signature, signingTimestamp) {\n                return _qz.tools.promise(function(resolve, reject) {\n                    var msg = {\n                        call: callName,\n                        promise: { resolve: resolve, reject: reject },\n                        params: params,\n                        signature: signature,\n                        timestamp: signingTimestamp\n                    };\n\n                    _qz.websocket.connection.sendData(msg);\n                });\n            },\n\n            /** Library of promises awaiting a response, uid -> promise */\n            pendingCalls: {},\n\n            /** List of functions to call on error from the websocket. */\n            errorCallbacks: [],\n            /** Calls all functions registered to listen for errors. */\n            callError: function(evt) {\n                if (Array.isArray(_qz.websocket.errorCallbacks)) {\n                    for(var i = 0; i < _qz.websocket.errorCallbacks.length; i++) {\n                        _qz.websocket.errorCallbacks[i](evt);\n                    }\n                } else {\n                    _qz.websocket.errorCallbacks(evt);\n                }\n            },\n\n            /** List of function to call on closing from the websocket. */\n            closedCallbacks: [],\n            /** Calls all functions registered to listen for closing. */\n            callClose: function(evt) {\n                if (Array.isArray(_qz.websocket.closedCallbacks)) {\n                    for(var i = 0; i < _qz.websocket.closedCallbacks.length; i++) {\n                        _qz.websocket.closedCallbacks[i](evt);\n                    }\n                } else {\n                    _qz.websocket.closedCallbacks(evt);\n                }\n            }\n        },\n\n\n        printing: {\n            /** Default options used for new printer configs. Can be overridden using {@link qz.configs.setDefaults}. */\n            defaultConfig: {\n                //value purposes are explained in the qz.configs.setDefaults docs\n\n                colorType: 'color',\n                copies: 1,\n                density: 0,\n                duplex: false,\n                fallbackDensity: null,\n                interpolation: 'bicubic',\n                jobName: null,\n                legacy: false,\n                margins: 0,\n                orientation: null,\n                paperThickness: null,\n                printerTray: null,\n                rasterize: true,\n                rotation: 0,\n                scaleContent: true,\n                size: null,\n                units: 'in',\n\n                altPrinting: false,\n                encoding: null,\n                endOfDoc: null,\n                perSpool: 1\n            }\n        },\n\n\n        serial: {\n            /** List of functions called when receiving data from serial connection. */\n            serialCallbacks: [],\n            /** Calls all functions registered to listen for serial events. */\n            callSerial: function(streamEvent) {\n                if (Array.isArray(_qz.serial.serialCallbacks)) {\n                    for(var i = 0; i < _qz.serial.serialCallbacks.length; i++) {\n                        _qz.serial.serialCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.serial.serialCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        usb: {\n            /** List of functions called when receiving data from usb connection. */\n            usbCallbacks: [],\n            /** Calls all functions registered to listen for usb events. */\n            callUsb: function(streamEvent) {\n                if (Array.isArray(_qz.usb.usbCallbacks)) {\n                    for(var i = 0; i < _qz.usb.usbCallbacks.length; i++) {\n                        _qz.usb.usbCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.usb.usbCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        hid: {\n            /** List of functions called when receiving data from hid connection. */\n            hidCallbacks: [],\n            /** Calls all functions registered to listen for hid events. */\n            callHid: function(streamEvent) {\n                if (Array.isArray(_qz.hid.hidCallbacks)) {\n                    for(var i = 0; i < _qz.hid.hidCallbacks.length; i++) {\n                        _qz.hid.hidCallbacks[i](streamEvent);\n                    }\n                } else {\n                    _qz.hid.hidCallbacks(streamEvent);\n                }\n            }\n        },\n\n\n        security: {\n            /** Function used to resolve promise when acquiring site's public certificate. */\n            certPromise: function(resolve, reject) { reject(); },\n            /** Called to create new promise (using {@link _qz.security.certPromise}) for certificate retrieval. */\n            callCert: function() {\n                return _qz.tools.promise(_qz.security.certPromise);\n            },\n\n            /** Function used to create promise resolver when requiring signed calls. */\n            signaturePromise: function() { return function(resolve) { resolve(); } },\n            /** Called to create new promise (using {@link _qz.security.signaturePromise}) for signed calls. */\n            callSign: function(toSign) {\n                return _qz.tools.promise(_qz.security.signaturePromise(toSign));\n            }\n        },\n\n\n        tools: {\n            /** Create a new promise */\n            promise: function(resolver) {\n                return new RSVP.Promise(resolver);\n            },\n\n            stringify: function(object) {\n                //old versions of prototype affect stringify\n                var pjson = Array.prototype.toJSON;\n                delete Array.prototype.toJSON;\n\n                var result = JSON.stringify(object);\n\n                if (pjson) {\n                    Array.prototype.toJSON = pjson;\n                }\n\n                return result;\n            },\n\n            hash: function(data) {\n                return Sha256.hash(data);\n            },\n\n            ws: typeof WebSocket !== 'undefined' ? WebSocket : null,\n\n            absolute: function(loc) {\n                if (typeof window !== 'undefined' && typeof document.createElement === 'function') {\n                    var a = document.createElement(\"a\");\n                    a.href = loc;\n                    return a.href;\n                }\n                return loc;\n            },\n\n            /** Performs deep copy to target from remaining params */\n            extend: function(target) {\n                //special case when reassigning properties as objects in a deep copy\n                if (typeof target !== 'object') {\n                    target = {};\n                }\n\n                for(var i = 1; i < arguments.length; i++) {\n                    var source = arguments[i];\n                    if (!source) { continue; }\n\n                    for(var key in source) {\n                        if (source.hasOwnProperty(key)) {\n                            if (target === source[key]) { continue; }\n\n                            if (source[key] && source[key].constructor && source[key].constructor === Object) {\n                                var clone;\n                                if (Array.isArray(source[key])) {\n                                    clone = target[key] || [];\n                                } else {\n                                    clone = target[key] || {};\n                                }\n\n                                target[key] = _qz.tools.extend(clone, source[key]);\n                            } else if (source[key] !== undefined) {\n                                target[key] = source[key];\n                            }\n                        }\n                    }\n                }\n\n                return target;\n            }\n        }\n    };\n\n\n///// CONFIG CLASS ////\n\n    /** Object to handle configured printer options. */\n    function Config(printer, opts) {\n        /**\n         * Set the printer assigned to this config.\n         * @param {string|Object} newPrinter Name of printer. Use object type to specify printing to file or host.\n         *  @param {string} [newPrinter.name] Name of printer to send printing.\n         *  @param {string} [newPrinter.file] Name of file to send printing.\n         *  @param {string} [newPrinter.host] IP address or host name to send printing.\n         *  @param {string} [newPrinter.port] Port used by &lt;printer.host>.\n         */\n        this.setPrinter = function(newPrinter) {\n            if (typeof newPrinter === 'string') {\n                newPrinter = { name: newPrinter };\n            }\n\n            this.printer = newPrinter;\n        };\n\n        /**\n         *  @returns {Object} The printer currently assigned to this config.\n         */\n        this.getPrinter = function() {\n            return this.printer;\n        };\n\n        /**\n         * Alter any of the printer options currently applied to this config.\n         * @param newOpts {Object} The options to change. See <code>qz.config.setDefaults</code> docs for available values.\n         *\n         * @see qz.config.setDefaults\n         */\n        this.reconfigure = function(newOpts) {\n            _qz.tools.extend(this.config, newOpts);\n        };\n\n        /**\n         * @returns {Object} The currently applied options on this config.\n         */\n        this.getOptions = function() {\n            return this.config;\n        };\n\n        // init calls for new config object\n        this.setPrinter(printer);\n        this.config = opts;\n    }\n\n    /**\n     * Shortcut method for calling <code>qz.print</code> with a particular config.\n     * @param {Array<Object|string>} data Array of data being sent to the printer. See <code>qz.print</code> docs for available values.\n     * @param {boolean} [signature] Pre-signed signature of JSON string containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.\n     * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.\n     *\n     * @example\n     * qz.print(myConfig, ...); // OR\n     * myConfig.print(...);\n     *\n     * @see qz.print\n     */\n    Config.prototype.print = function(data, signature, signingTimestamp) {\n        qz.print(this, data, signature, signingTimestamp);\n    };\n\n\n///// PUBLIC METHODS /////\n\n    /** @namespace qz */\n    return {\n\n        /**\n         * Calls related specifically to the web socket connection.\n         * @namespace qz.websocket\n         */\n        websocket: {\n            /**\n             * Check connection status. Active connection is necessary for other calls to run.\n             *\n             * @returns {boolean} If there is an active connection with QZ Tray.\n             *\n             * @see connect\n             *\n             * @memberof  qz.websocket\n             */\n            isActive: function() {\n                return _qz.websocket.connection != null && _qz.websocket.connection.established;\n            },\n\n            /**\n             * Call to setup connection with QZ Tray on user's system.\n             *\n             * @param {Object} [options] Configuration options for the web socket connection.\n             *  @param {string|Array<string>} [options.host=['localhost', 'localhost.qz.io']] Host running the QZ Tray software.\n             *  @param {Object} [options.port] Config options for ports to cycle.\n             *   @param {Array<number>} [options.port.secure=[8181, 8282, 8383, 8484]] Array of secure (WSS) ports to try\n             *   @param {Array<number>} [options.port.insecure=[8182, 8283, 8384, 8485]] Array of insecure (WS) ports to try\n             *  @param {boolean} [options.usingSecure=true] If the web socket should try to use secure ports for connecting.\n             *  @param {number} [options.keepAlive=60] Seconds between keep-alive pings to keep connection open. Set to 0 to disable.\n             *  @param {number} [options.retries=0] Number of times to reconnect before failing.\n             *  @param {number} [options.delay=0] Seconds before firing a connection.  Ignored if <code>options.retries</code> is 0.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.websocket\n             */\n            connect: function(options) {\n                return _qz.tools.promise(function(resolve, reject) {\n                    if (qz.websocket.isActive()) {\n                        reject(new Error(\"An open connection with QZ Tray already exists\"));\n                        return;\n                    } else if (_qz.websocket.connection != null) {\n                        reject(new Error(\"The current connection attempt has not returned yet\"));\n                        return;\n                    }\n\n                    if (!_qz.tools.ws) {\n                        reject(new Error(\"WebSocket not supported by this browser\"));\n                        return;\n                    } else if (!_qz.tools.ws.CLOSED || _qz.tools.ws.CLOSED == 2) {\n                        reject(new Error(\"Unsupported WebSocket version detected: HyBi-00/Hixie-76\"));\n                        return;\n                    }\n\n                    //ensure some form of options exists for value checks\n                    if (options == undefined) { options = {}; }\n\n                    //disable secure ports if page is not secure\n                    if (typeof location === 'undefined' || location.protocol !== 'https:') {\n                        //respect forcing secure ports if it is defined, otherwise disable\n                        if (typeof options.usingSecure === 'undefined') {\n                            _qz.log.trace(\"Disabling secure ports due to insecure page\");\n                            options.usingSecure = false;\n                        }\n                    }\n\n                    //ensure any hosts are passed to internals as an array\n                    if (typeof options.host !== 'undefined' && !Array.isArray(options.host)) {\n                        options.host = [options.host];\n                    }\n\n                    var attempt = function(count) {\n                        var tried = false;\n                        var nextAttempt = function() {\n                            if (!tried) {\n                                tried = true;\n\n                                if (options && count < options.retries) {\n                                    attempt(count + 1);\n                                } else {\n                                    reject.apply(null, arguments);\n                                }\n                            }\n                        };\n\n                        var delayed = function() {\n                            var config = _qz.tools.extend({}, _qz.websocket.connectConfig, options);\n                            _qz.websocket.setup.findConnection(config, resolve, nextAttempt)\n                        };\n                        if (count == 0) {\n                            delayed(); // only retries will be called with a delay\n                        } else {\n                            setTimeout(delayed, options.delay * 1000);\n                        }\n                    };\n\n                    attempt(0);\n                });\n            },\n\n            /**\n             * Stop any active connection with QZ Tray.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.websocket\n             */\n            disconnect: function() {\n                return _qz.tools.promise(function(resolve, reject) {\n                    if (qz.websocket.isActive()) {\n                        _qz.websocket.connection.close();\n                        _qz.websocket.connection.promise = { resolve: resolve, reject: reject };\n                    } else {\n                        reject(new Error(\"No open connection with QZ Tray\"))\n                    }\n                });\n            },\n\n            /**\n             * List of functions called for any connections errors outside of an API call.<p/>\n             * Also called if {@link websocket#connect} fails to connect.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.\n             *\n             * @memberof qz.websocket\n             */\n            setErrorCallbacks: function(calls) {\n                _qz.websocket.errorCallbacks = calls;\n            },\n\n            /**\n             * List of functions called for any connection closing event outside of an API call.<p/>\n             * Also called when {@link websocket#disconnect} is called.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Event} event)</code> calls.\n             *\n             * @memberof qz.websocket\n             */\n            setClosedCallbacks: function(calls) {\n                _qz.websocket.closedCallbacks = calls;\n            },\n\n            /**\n             * @param {string} [hostname] Hostname to try to connect to when determining network interfaces, defaults to \"google.com\"\n             * @param {number} [port] Port to use with custom hostname, defaults to 443\n             *\n             * @returns {Promise<Object<{ipAddress: String, macAddress: String}>|Error>} Connected system's network information.\n             *\n             * @memberof qz.websocket\n             */\n            getNetworkInfo: function(hostname, port) {\n                return _qz.websocket.dataPromise('websocket.getNetworkInfo', {\n                    hostname: hostname,\n                    port: port\n                });\n            },\n\n            /**\n             * @returns {Object<{socket: String, host: String, port: Number}>} Details of active websocket connection\n             *\n             * @memberof qz.websocket\n             */\n            getConnectionInfo: function() {\n                if (_qz.websocket.connection) {\n                    var url = _qz.websocket.connection.url.split(/[:\\/]+/g);\n                    return { socket: url[0], host: url[1], port: +url[2] };\n                } else {\n                    throw new Error(\"A connection to QZ has not been established yet\");\n                }\n            }\n\n        },\n\n\n        /**\n         * Calls related to getting printer information from the connection.\n         * @namespace qz.printers\n         */\n        printers: {\n            /**\n             * @returns {Promise<string|Error>} Name of the connected system's default printer.\n             *\n             * @memberof qz.printers\n             */\n            getDefault: function() {\n                return _qz.websocket.dataPromise('printers.getDefault');\n            },\n\n            /**\n             * @param {string} [query] Search for a specific printer. All printers are returned if not provided.\n             *\n             * @returns {Promise<Array<string>|string|Error>} The matched printer name if <code>query</code> is provided.\n             *                                                Otherwise an array of printer names found on the connected system.\n             *\n             * @memberof qz.printers\n             */\n            find: function(query) {\n                return _qz.websocket.dataPromise('printers.find', { query: query });\n            }\n        },\n\n        /**\n         * Calls related to setting up new printer configurations.\n         * @namespace qz.configs\n         */\n        configs: {\n            /**\n             * Default options used by new configs if not overridden.\n             * Setting a value to NULL will use the printer's default options.\n             * Updating these will not update the options on any created config.\n             *\n             * @param {Object} options Default options used by printer configs if not overridden.\n             *\n             *  @param {string} [options.colorType='color'] Valid values <code>[color | grayscale | blackwhite]</code>\n             *  @param {number} [options.copies=1] Number of copies to be printed.\n             *  @param {number|Array<number>} [options.density=72] Pixel density (DPI, DPMM, or DPCM depending on <code>[options.units]</code>).\n             *      If provided as an array, uses the first supported density found (or the first entry if none found).\n             *  @param {boolean} [options.duplex=false] Double sided printing\n             *  @param {number} [options.fallbackDensity=null] Value used when default density value cannot be read, or in cases where reported as \"Normal\" by the driver, (in DPI, DPMM, or DPCM depending on <code>[options.units]</code>).\n             *  @param {string} [options.interpolation='bicubic'] Valid values <code>[bicubic | bilinear | nearest-neighbor]</code>. Controls how images are handled when resized.\n             *  @param {string} [options.jobName=null] Name to display in print queue.\n             *  @param {boolean} [options.legacy=false] If legacy style printing should be used.\n             *  @param {Object|number} [options.margins=0] If just a number is provided, it is used as the margin for all sides.\n             *   @param {number} [options.margins.top=0]\n             *   @param {number} [options.margins.right=0]\n             *   @param {number} [options.margins.bottom=0]\n             *   @param {number} [options.margins.left=0]\n             *  @param {string} [options.orientation=null] Valid values <code>[portrait | landscape | reverse-landscape]</code>\n             *  @param {number} [options.paperThickness=null]\n             *  @param {string} [options.printerTray=null] //TODO - string?\n             *  @param {boolean} [options.rasterize=true] Whether documents should be rasterized before printing. Forced TRUE if <code>[options.density]</code> is specified.\n             *  @param {number} [options.rotation=0] Image rotation in degrees.\n             *  @param {boolean} [options.scaleContent=true] Scales print content to page size, keeping ratio.\n             *  @param {Object} [options.size=null] Paper size.\n             *   @param {number} [options.size.width=null] Page width.\n             *   @param {number} [options.size.height=null] Page height.\n             *  @param {string} [options.units='in'] Page units, applies to paper size, margins, and density. Valid value <code>[in | cm | mm]</code>\n             *\n             *  @param {boolean} [options.altPrinting=false] Print the specified file using CUPS command line arguments.  Has no effect on Windows.\n             *  @param {string} [options.encoding=null] Character set\n             *  @param {string} [options.endOfDoc=null]\n             *  @param {number} [options.perSpool=1] Number of pages per spool.\n             *\n             * @memberof qz.configs\n             */\n            setDefaults: function(options) {\n                _qz.tools.extend(_qz.printing.defaultConfig, options);\n            },\n\n            /**\n             * Creates new printer config to be used in printing.\n             *\n             * @param {string|object} printer Name of printer. Use object type to specify printing to file or host.\n             *  @param {string} [printer.name] Name of printer to send printing.\n             *  @param {string} [printer.file] Name of file to send printing.\n             *  @param {string} [printer.host] IP address or host name to send printing.\n             *  @param {string} [printer.port] Port used by &lt;printer.host>.\n             * @param {Object} [options] Override any of the default options for this config only.\n             *\n             * @returns {Config} The new config.\n             *\n             * @see config.setDefaults\n             *\n             * @memberof qz.configs\n             */\n            create: function(printer, options) {\n                var myOpts = _qz.tools.extend({}, _qz.printing.defaultConfig, options);\n                return new Config(printer, myOpts);\n            }\n        },\n\n\n        /**\n         * Send data to selected config for printing.\n         * The promise for this method will resolve when the document has been sent to the printer. Actual printing may not be complete.\n         * <p/>\n         * Optionally, print requests can be pre-signed:\n         * Signed content consists of a JSON object string containing no spacing,\n         * following the format of the \"call\" and \"params\" keys in the API call, with the addition of a \"timestamp\" key in milliseconds\n         * ex. <code>'{\"call\":\"<callName>\",\"params\":{...},\"timestamp\":1450000000}'</code>\n         *\n         * @param {Object<Config>} config Previously created config object.\n         * @param {Array<Object|string>} data Array of data being sent to the printer. String values are interpreted the same as the default <code>[raw]</code> object value.\n         *  @param {string} data.data\n         *  @param {string} data.type Valid values <code>[html | image | pdf | raw]</code>\n         *  @param {string} [data.format] Format of data provided.<p/>\n         *      For <code>[html]</code> types, valid formats include <code>[file(default) | plain]</code>.<p/>\n         *      For <code>[image]</code> types, valid formats include <code>[base64 | file(default)]</code>.<p/>\n         *      For <code>[pdf]</code> types, valid format include <code>[base64 | file(default)]</code>.<p/>\n         *      For <code>[raw]</code> types, valid formats include <code>[base64 | file | hex | plain(default) | image | xml]</code>.\n         *  @param {Object} [data.options]\n         *   @param {string} [data.options.language] Required with <code>[raw]</code> type <code>[image]</code> format. Printer language.\n         *   @param {number} [data.options.x] Optional with <code>[raw]</code> type <code>[image]</code> format. The X position of the image.\n         *   @param {number} [data.options.y] Optional with <code>[raw]</code> type <code>[image]</code> format. The Y position of the image.\n         *   @param {string|number} [data.options.dotDensity] Optional with <code>[raw]</code> type <code>[image]</code> format.\n         *   @param {number} [data.precision=128] Optional with <code>[raw]</code> type <code>[image]</code> format. Bit precision of the ribbons.\n         *   @param {boolean|string|Array<Array<number>>} [data.options.overlay=false] Optional with <code>[raw]</code> type <code>[image]</code> format.\n         *      Boolean sets entire layer, string sets mask image, Array sets array of rectangles in format <code>[x1,y1,x2,y2]</code>.\n         *   @param {string} [data.options.xmlTag] Required with <code>[xml]</code> format. Tag name containing base64 formatted data.\n         *   @param {number} [data.options.pageWidth] Optional with <code>[html]</code> type printing. Width of the web page to render. Defaults to paper width.\n         *   @param {number} [data.options.pageHeight] Optional with <code>[html]</code> type printing. Height of the web page to render. Defaults to adjusted web page height.\n         * @param {boolean} [signature] Pre-signed signature of JSON string containing <code>call</code>, <code>params</code>, and <code>timestamp</code>.\n         * @param {number} [signingTimestamp] Required with <code>signature</code>. Timestamp used with pre-signed content.\n         *\n         * @returns {Promise<null|Error>}\n         *\n         * @see qz.config.create\n         *\n         * @memberof qz\n         */\n        print: function(config, data, signature, signingTimestamp) {\n            //change relative links to absolute\n            for(var i = 0; i < data.length; i++) {\n                if (data[i].constructor === Object) {\n                    if ((!data[i].format && data[i].type && (data[i].type.toUpperCase() !== 'RAW' && data[i].type.toUpperCase() !== 'DIRECT')) //unspecified format and not raw -> assume file\n                        || (data[i].format && (data[i].format.toUpperCase() === 'FILE'\n                            || (data[i].format.toUpperCase() === 'IMAGE' && !(data[i].data.indexOf(\"data:image/\") === 0 && data[i].data.indexOf(\";base64,\") !== 0))\n                            || data[i].format.toUpperCase() === 'XML'))) {\n                        data[i].data = _qz.tools.absolute(data[i].data);\n                    }\n                    if (data[i].options && typeof data[i].options.overlay === 'string') {\n                        data[i].options.overlay = _qz.tools.absolute(data[i].options.overlay);\n                    }\n                }\n            }\n\n            var params = {\n                printer: config.getPrinter(),\n                options: config.getOptions(),\n                data: data\n            };\n            return _qz.websocket.dataPromise('print', params, signature, signingTimestamp);\n        },\n\n\n        /**\n         * Calls related to interaction with serial ports.\n         * @namespace qz.serial\n         */\n        serial: {\n            /**\n             * @returns {Promise<Array<string>|Error>} Communication (RS232, COM, TTY) ports available on connected system.\n             *\n             * @memberof qz.serial\n             */\n            findPorts: function() {\n                return _qz.websocket.dataPromise('serial.findPorts');\n            },\n\n            /**\n             * List of functions called for any response from open serial ports.\n             * Event data will contain <code>{string} portName</code> for all types.\n             *  For RECEIVE types, <code>{string} output</code>.\n             *  For ERROR types, <code>{string} exception</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({string} portName, {string} output)</code> calls.\n             *\n             * @memberof qz.serial\n             */\n            setSerialCallbacks: function(calls) {\n                _qz.serial.serialCallbacks = calls;\n            },\n\n            /**\n             * @param {string} port Name of port to open.\n             * @param {Object} [options] Boundaries of serial port output.\n             *  @param {string} [options.start=0x0002] Character denoting start of serial response. Not used if <code>width</code is provided.\n             *  @param {string} [options.end=0x000D] Character denoting end of serial response. Not used if <code>width</code> is provided.\n             *  @param {number} [options.width] Used for fixed-width response serial communication.\n             *  @param {string} [options.baudRate=9600]\n             *  @param {string} [options.dataBits=8]\n             *  @param {string} [options.stopBits=1]\n             *  @param {string} [options.parity='NONE'] Valid values <code>[NONE| EVEN | ODD | MARK | SPACE]</code>\n             *  @param {string} [options.flowControl='NONE'] Valid values <code>[NONE | XONXOFF | XONXOFF_OUT | XONXOFF_IN | RTSCTS | RTSCTS_OUT | RTSCTS_IN]</code>\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.serial\n             */\n            openPort: function(port, options) {\n                var params = {\n                    port: port,\n                    options: options\n                };\n                return _qz.websocket.dataPromise('serial.openPort', params);\n            },\n\n            /**\n             * Send commands over a serial port.\n             * Any responses from the device will be sent to serial callback functions.\n             *\n             * @param {string} port An open port to send data over.\n             * @param {string} data The data to send to the serial device.\n             * @param {Object} [properties] DEPRECATED: Properties of data being sent over the serial port.\n             *  @param {string} [properties.baudRate=9600]\n             *  @param {string} [properties.dataBits=8]\n             *  @param {string} [properties.stopBits=1]\n             *  @param {string} [properties.parity='NONE'] Valid values <code>[NONE| EVEN | ODD | MARK | SPACE]</code>\n             *  @param {string} [properties.flowControl='NONE'] Valid values <code>[NONE | XONXOFF | XONXOFF_OUT | XONXOFF_IN | RTSCTS | RTSCTS_OUT | RTSCTS_IN]</code>\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @see qz.serial.setSerialCallbacks\n             *\n             * @memberof qz.serial\n             */\n            sendData: function(port, data, properties) {\n                if (properties != null) {\n                    _qz.log.warn(\"Properties object is deprecated on sendData calls, use openPort instead.\");\n                }\n\n                var params = {\n                    port: port,\n                    data: data,\n                    properties: properties\n                };\n                return _qz.websocket.dataPromise('serial.sendData', params);\n            },\n\n            /**\n             * @param {string} port Name of port to close.\n             *\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.serial\n             */\n            closePort: function(port) {\n                return _qz.websocket.dataPromise('serial.closePort', { port: port });\n            }\n        },\n\n\n        /**\n         * Calls related to interaction with USB devices.\n         * @namespace qz.usb\n         */\n        usb: {\n            /**\n             * List of available USB devices. Includes (hexadecimal) vendor ID, (hexadecimal) product ID, and hub status.\n             * If supported, also returns manufacturer and product descriptions.\n             *\n             * @param includeHubs Whether to include USB hubs.\n             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected USB devices.\n             *\n             * @memberof qz.usb\n             */\n            listDevices: function(includeHubs) {\n                return _qz.websocket.dataPromise('usb.listDevices', { includeHubs: includeHubs });\n            },\n\n            /**\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) interfaces on a USB device.\n             *\n             * @memberof qz.usb\n             */\n            listInterfaces: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('usb.listInterfaces', deviceInfo);\n            },\n\n            /**\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.iface Hex string of interface on the USB device to search.\n             * @returns {Promise<Array<string>|Error>} List of available (hexadecimal) endpoints on a USB device's interface.\n             *\n             * @memberof qz.usb\n             */\n            listEndpoints: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        interface: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.listEndpoints', deviceInfo);\n            },\n\n            /**\n             * List of functions called for any response from open usb devices.\n             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.\n             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).\n             *  For ERROR types, <code>{string} exception</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.\n             *\n             * @memberof qz.usb\n             */\n            setUsbCallbacks: function(calls) {\n                _qz.usb.usbCallbacks = calls;\n            },\n\n            /**\n             * Claim a USB device's interface to enable sending/reading data across an endpoint.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.interface Hex string of interface on the USB device to claim.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            claimDevice: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        interface: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.claimDevice', deviceInfo);\n            },\n\n            /**\n             * Check the current claim state of a USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             * @returns {Promise<boolean|Error>}\n             *\n             * @since 2.0.2\n             * @memberOf qz.usb\n             */\n            isClaimed: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('usb.isClaimed', deviceInfo);\n            },\n\n            /**\n             * Send data to a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             *  @param deviceInfo.data Bytes to send over specified endpoint.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            sendData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2],\n                        data: arguments[3]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.sendData', deviceInfo);\n            },\n\n            /**\n             * Read data from a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the USB device.\n             *\n             * @memberof qz.usb\n             */\n            readData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2],\n                        responseSize: arguments[3]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.readData', deviceInfo);\n            },\n\n            /**\n             * Provides a continuous stream of read data from a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             *  @param deviceInfo.interval=100 Frequency to send read data back, in milliseconds.\n             * @returns {Promise<null|Error>}\n             *\n             * @see qz.usb.setUsbCallbacks\n             *\n             * @memberof qz.usb\n             */\n            openStream: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2],\n                        responseSize: arguments[3],\n                        interval: arguments[4]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.openStream', deviceInfo);\n            },\n\n            /**\n             * Stops the stream of read data from a claimed USB device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             *  @param deviceInfo.endpoint Hex string of endpoint on the claimed interface for the USB device.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            closeStream: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        endpoint: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('usb.closeStream', deviceInfo);\n            },\n\n            /**\n             * Release a claimed USB device to free resources after sending/reading data.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of USB device's vendor ID.\n             *  @param deviceInfo.productId Hex string of USB device's product ID.\n             * @returns {Promise<null|Error>}\n             *\n             * @memberof qz.usb\n             */\n            releaseDevice: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('usb.releaseDevice', deviceInfo);\n            }\n        },\n\n\n        /**\n         * Calls related to interaction with HID USB devices<br/>\n         * Many of these calls can be accomplished from the <code>qz.usb</code> namespace,\n         * but HID allows for simpler interaction\n         * @namespace qz.hid\n         * @since 2.0.1\n         */\n        hid: {\n            /**\n             * List of available HID devices. Includes (hexadecimal) vendor ID and (hexadecimal) product ID.\n             * If available, also returns manufacturer and product descriptions.\n             *\n             * @returns {Promise<Array<Object>|Error>} Array of JSON objects containing information on connected HID devices.\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            listDevices: function() {\n                return _qz.websocket.dataPromise('hid.listDevices');\n            },\n\n            /**\n             * Start listening for HID device actions, such as attach / detach events.\n             * Reported under the ACTION type in the streamEvent on callbacks.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @see qz.hid.setHidCallbacks\n             *\n             * @memberof qz.hid\n             */\n            startListening: function() {\n                return _qz.websocket.dataPromise('hid.startListening');\n            },\n\n            /**\n             * Stop listening for HID device actions.\n             *\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @see qz.hid.setHidCallbacks\n             *\n             * @memberof qz.hid\n             */\n            stopListening: function() {\n                return _qz.websocket.dataPromise('hid.stopListening');\n            },\n\n            /**\n             * List of functions called for any response from open usb devices.\n             * Event data will contain <code>{string} vendorId</code> and <code>{string} productId</code> for all types.\n             *  For RECEIVE types, <code>{Array} output</code> (in hexadecimal format).\n             *  For ERROR types, <code>{string} exception</code>.\n             *  For ACTION types, <code>{string} actionType</code>.\n             *\n             * @param {Function|Array<Function>} calls Single or array of <code>Function({Object} eventData)</code> calls.\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            setHidCallbacks: function(calls) {\n                _qz.hid.hidCallbacks = calls;\n            },\n\n            /**\n             * Claim a HID device to enable sending/reading data across.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            claimDevice: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.claimDevice', deviceInfo);\n            },\n\n            /**\n             * Check the current claim state of a HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<boolean|Error>}\n             *\n             * @since 2.0.2\n             * @memberOf qz.hid\n             */\n            isClaimed: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.isClaimed', deviceInfo);\n            },\n\n            /**\n             * Send data to a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.data Bytes to send over specified endpoint.\n             *  @param deviceInfo.endpoint=0x00 First byte of the data packet signifying the HID report ID.\n             *                             Must be 0x00 for devices only supporting a single report.\n             *  @param deviceInfo.reportId=0x00 Alias for <code>deviceInfo.endpoint</code>. Not used if endpoint is provided.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            sendData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        data: arguments[2],\n                        endpoint: arguments[3]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('hid.sendData', deviceInfo);\n            },\n\n            /**\n             * Read data from a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             * @returns {Promise<Array<string>|Error>} List of (hexadecimal) bytes received from the HID device.\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            readData: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        responseSize: arguments[2]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('hid.readData', deviceInfo);\n            },\n\n            /**\n             * Provides a continuous stream of read data from a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             *  @param deviceInfo.responseSize Size of the byte array to receive a response in.\n             *  @param deviceInfo.interval=100 Frequency to send read data back, in milliseconds.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @see qz.hid.setHidCallbacks\n             *\n             * @memberof qz.hid\n             */\n            openStream: function(deviceInfo) {\n                //backwards compatibility\n                if (typeof deviceInfo !== 'object') {\n                    deviceInfo = {\n                        vendorId: arguments[0],\n                        productId: arguments[1],\n                        responseSize: arguments[2],\n                        interval: arguments[3]\n                    };\n                }\n\n                return _qz.websocket.dataPromise('hid.openStream', deviceInfo);\n            },\n\n            /**\n             * Stops the stream of read data from a claimed HID device.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            closeStream: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.closeStream', deviceInfo);\n            },\n\n            /**\n             * Release a claimed HID device to free resources after sending/reading data.\n             *\n             * @param {object} deviceInfo Config details of the HID device.\n             *  @param deviceInfo.vendorId Hex string of HID device's vendor ID.\n             *  @param deviceInfo.productId Hex string of HID device's product ID.\n             *  @param deviceInfo.usagePage Hex string of HID device's usage page when multiple are present.\n             *  @param deviceInfo.serial Serial ID of HID device.\n             * @returns {Promise<null|Error>}\n             * @since 2.0.1\n             *\n             * @memberof qz.hid\n             */\n            releaseDevice: function(deviceInfo) {\n                if (typeof deviceInfo !== 'object') { deviceInfo = { vendorId: arguments[0], productId: arguments[1] }; } //backwards compatibility\n\n                return _qz.websocket.dataPromise('hid.releaseDevice', deviceInfo);\n            }\n        },\n\n\n        /**\n         * Calls related to signing connection requests.\n         * @namespace qz.security\n         */\n        security: {\n            /**\n             * Set promise resolver for calls to acquire the site's certificate.\n             *\n             * @param {Function} promiseCall <code>Function({function} resolve)</code> called as promise for getting the public certificate.\n             *     Should call <code>resolve</code> parameter with the result.\n             *\n             * @memberof qz.security\n             */\n            setCertificatePromise: function(promiseCall) {\n                _qz.security.certPromise = promiseCall;\n            },\n\n            /**\n             * Set promise creator for calls to sign API calls.\n             *\n             * @param {Function} promiseGen <code>Function({function} toSign)</code> Should return a function, <code>Function({function} resolve)</code>, that\n             *     will sign the content and resolve the created promise.\n             * @memberof qz.security\n             */\n            setSignaturePromise: function(promiseGen) {\n                _qz.security.signaturePromise = promiseGen;\n            }\n        },\n\n        /**\n         * Calls related to compatibility adjustments\n         * @namespace qz.api\n         */\n        api: {\n            /**\n             * Show or hide QZ api debugging statements in the browser console.\n             *\n             * @param {boolean} show Whether the debugging logs for QZ should be shown. Hidden by default.\n             *\n             * @memberof qz.api\n             */\n            showDebug: function(show) {\n                _qz.DEBUG = show;\n            },\n\n            /**\n             * Get version of connected QZ Tray application.\n             *\n             * @returns {Promise<string|Error>} Version number of QZ Tray.\n             *\n             * @memberof qz.api\n             */\n            getVersion: function() {\n                return _qz.websocket.dataPromise('getVersion');\n            },\n\n            /**\n             * Change the promise library used by QZ API.\n             * Should be called before any initialization to avoid possible errors.\n             *\n             * @param {Function} promiser <code>Function({function} resolver)</code> called to create new promises.\n             *\n             * @memberof qz.api\n             */\n            setPromiseType: function(promiser) {\n                _qz.tools.promise = promiser;\n            },\n\n            /**\n             * Change the SHA-256 hashing function used by QZ API.\n             * Should be called before any initialization to avoid possible errors.\n             *\n             * @param {Function} hasher <code>Function({function} message)</code> called to create hash of passed string.\n             *\n             * @memberof qz.api\n             */\n            setSha256Type: function(hasher) {\n                _qz.tools.hash = hasher;\n            },\n\n            /**\n             * Change the WebSocket handler.\n             * Should be called before any initialization to avoid possible errors.\n             *\n             * @param {Function} ws <code>Function({function} WebSocket)</code> called to override the internal WebSocket handler.\n             *\n             * @memberof qz.api\n             */\n            setWebSocketType: function(ws) {\n                _qz.tools.ws = ws;\n            }\n        },\n\n        /**\n         * Version of this JavaScript library\n         *\n         * @constant {string}\n         *\n         * @memberof qz\n         */\n        version: _qz.VERSION\n    };\n\n})();\n\n\n(function() {\n    if (typeof define === 'function' && define.amd) {\n        define(qz);\n    } else if (typeof exports === 'object') {\n        module.exports = qz;\n        try {\n            var crypto = require('crypto');\n            qz.api.setSha256Type(function(data) {\n                return crypto.createHash('sha256').update(data).digest('hex');\n            });\n        }\n        catch(ignore) {}\n    } else {\n        window.qz = qz;\n    }\n})();\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2016 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   4.7.0+2254ba40\n */\n\nfunction callbacksFor(object) {\n  var callbacks = object._promiseCallbacks;\n\n  if (!callbacks) {\n    callbacks = object._promiseCallbacks = {};\n  }\n\n  return callbacks;\n}\n\n/**\n  @class RSVP.EventTarget\n*/\nvar EventTarget = {\n\n  /**\n    `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n    Example:\n     ```javascript\n    let object = {};\n     RSVP.EventTarget.mixin(object);\n     object.on('finished', function(event) {\n      // handle event\n    });\n     object.trigger('finished', { detail: value });\n    ```\n     `EventTarget.mixin` also works with prototypes:\n     ```javascript\n    let Person = function() {};\n    RSVP.EventTarget.mixin(Person.prototype);\n     let yehuda = new Person();\n    let tom = new Person();\n     yehuda.on('poke', function(event) {\n      console.log('Yehuda says OW');\n    });\n     tom.on('poke', function(event) {\n      console.log('Tom says OW');\n    });\n     yehuda.trigger('poke');\n    tom.trigger('poke');\n    ```\n     @method mixin\n    @for RSVP.EventTarget\n    @private\n    @param {Object} object object to extend with EventTarget methods\n  */\n  mixin: function (object) {\n    object['on'] = this['on'];\n    object['off'] = this['off'];\n    object['trigger'] = this['trigger'];\n    object._promiseCallbacks = undefined;\n    return object;\n  },\n\n\n  /**\n    Registers a callback to be executed when `eventName` is triggered\n     ```javascript\n    object.on('event', function(eventInfo){\n      // handle the event\n    });\n     object.trigger('event');\n    ```\n     @method on\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to listen for\n    @param {Function} callback function to be called when the event is triggered.\n  */\n  on: function (eventName, callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback must be a function');\n    }\n\n    var allCallbacks = callbacksFor(this),\n        callbacks = void 0;\n\n    callbacks = allCallbacks[eventName];\n\n    if (!callbacks) {\n      callbacks = allCallbacks[eventName] = [];\n    }\n\n    if (callbacks.indexOf(callback)) {\n      callbacks.push(callback);\n    }\n  },\n\n\n  /**\n    You can use `off` to stop firing a particular callback for an event:\n     ```javascript\n    function doStuff() { // do stuff! }\n    object.on('stuff', doStuff);\n     object.trigger('stuff'); // doStuff will be called\n     // Unregister ONLY the doStuff callback\n    object.off('stuff', doStuff);\n    object.trigger('stuff'); // doStuff will NOT be called\n    ```\n     If you don't pass a `callback` argument to `off`, ALL callbacks for the\n    event will not be executed when the event fires. For example:\n     ```javascript\n    let callback1 = function(){};\n    let callback2 = function(){};\n     object.on('stuff', callback1);\n    object.on('stuff', callback2);\n     object.trigger('stuff'); // callback1 and callback2 will be executed.\n     object.off('stuff');\n    object.trigger('stuff'); // callback1 and callback2 will not be executed!\n    ```\n     @method off\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName event to stop listening to\n    @param {Function} callback optional argument. If given, only the function\n    given will be removed from the event's callback queue. If no `callback`\n    argument is given, all callbacks will be removed from the event's callback\n    queue.\n  */\n  off: function (eventName, callback) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = void 0,\n        index = void 0;\n\n    if (!callback) {\n      allCallbacks[eventName] = [];\n      return;\n    }\n\n    callbacks = allCallbacks[eventName];\n\n    index = callbacks.indexOf(callback);\n\n    if (index !== -1) {\n      callbacks.splice(index, 1);\n    }\n  },\n\n\n  /**\n    Use `trigger` to fire custom events. For example:\n     ```javascript\n    object.on('foo', function(){\n      console.log('foo event happened!');\n    });\n    object.trigger('foo');\n    // 'foo event happened!' logged to the console\n    ```\n     You can also pass a value as a second argument to `trigger` that will be\n    passed as an argument to all event listeners for the event:\n     ```javascript\n    object.on('foo', function(value){\n      console.log(value.name);\n    });\n     object.trigger('foo', { name: 'bar' });\n    // 'bar' logged to the console\n    ```\n     @method trigger\n    @for RSVP.EventTarget\n    @private\n    @param {String} eventName name of the event to be triggered\n    @param {*} options optional value to be passed to any event handlers for\n    the given `eventName`\n  */\n  trigger: function (eventName, options, label) {\n    var allCallbacks = callbacksFor(this),\n        callbacks = void 0,\n        callback = void 0;\n\n    if (callbacks = allCallbacks[eventName]) {\n      // Don't cache the callbacks.length since it may grow\n      for (var i = 0; i < callbacks.length; i++) {\n        callback = callbacks[i];\n\n        callback(options, label);\n      }\n    }\n  }\n};\n\nvar config = {\n  instrument: false\n};\n\nEventTarget['mixin'](config);\n\nfunction configure(name, value) {\n  if (arguments.length === 2) {\n    config[name] = value;\n  } else {\n    return config[name];\n  }\n}\n\nvar queue = [];\n\nfunction scheduleFlush() {\n  setTimeout(function () {\n    for (var i = 0; i < queue.length; i++) {\n      var entry = queue[i];\n\n      var payload = entry.payload;\n\n      payload.guid = payload.key + payload.id;\n      payload.childGuid = payload.key + payload.childId;\n      if (payload.error) {\n        payload.stack = payload.error.stack;\n      }\n\n      config['trigger'](entry.name, entry.payload);\n    }\n    queue.length = 0;\n  }, 50);\n}\n\nfunction instrument(eventName, promise, child) {\n  if (1 === queue.push({\n    name: eventName,\n    payload: {\n      key: promise._guidKey,\n      id: promise._id,\n      eventName: eventName,\n      detail: promise._result,\n      childId: child && child._id,\n      label: promise._label,\n      timeStamp: Date.now(),\n      error: config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n    } })) {\n    scheduleFlush();\n  }\n}\n\n/**\n  `RSVP.Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {*} object value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop, label);\n  resolve(promise, object);\n  return promise;\n}\n\nfunction withOwnPromise() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nvar tryCatchCallback = void 0;\nfunction tryCatcher() {\n  try {\n    var target = tryCatchCallback;\n    tryCatchCallback = null;\n    return target.apply(this, arguments);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryCatch(fn) {\n  tryCatchCallback = fn;\n  return tryCatcher;\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  config.async(function (promise) {\n    var sealed = false;\n    var result = tryCatch(then$$1).call(thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable === value) {\n        fulfill(promise, value);\n      } else {\n        resolve(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && result === TRY_CATCH_ERROR) {\n      sealed = true;\n      var error = TRY_CATCH_ERROR.error;\n      TRY_CATCH_ERROR.error = null;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    thenable._onError = null;\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      if (thenable === value) {\n        fulfill(promise, value);\n      } else {\n        resolve(promise, value);\n      }\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  var isOwnThenable = maybeThenable.constructor === promise.constructor && then$$1 === then && promise.constructor.resolve === resolve$1;\n\n  if (isOwnThenable) {\n    handleOwnThenable(promise, maybeThenable);\n  } else if (then$$1 === TRY_CATCH_ERROR) {\n    var error = TRY_CATCH_ERROR.error;\n    TRY_CATCH_ERROR.error = null;\n    reject(promise, error);\n  } else if (typeof then$$1 === 'function') {\n    handleForeignThenable(promise, maybeThenable, then$$1);\n  } else {\n    fulfill(promise, maybeThenable);\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    fulfill(promise, value);\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onError) {\n    promise._onError(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length === 0) {\n    if (config.instrument) {\n      instrument('fulfilled', promise);\n    }\n  } else {\n    config.async(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n  config.async(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var subscribers = parent._subscribers;\n  var length = subscribers.length;\n\n  parent._onError = null;\n\n  subscribers[length] = child;\n  subscribers[length + FULFILLED] = onFulfillment;\n  subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    config.async(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (config.instrument) {\n    instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);\n  }\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      result = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, result);\n    } else {\n      callback(result);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(state, promise, callback, result) {\n  var hasCallback = typeof callback === 'function';\n  var value = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback)(result);\n  } else {\n    value = result;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (value === promise) {\n    reject(promise, withOwnPromise());\n  } else if (value === TRY_CATCH_ERROR) {\n    var error = TRY_CATCH_ERROR.error;\n    TRY_CATCH_ERROR.error = null; // release\n    reject(promise, error);\n  } else if (hasCallback) {\n    resolve(promise, value);\n  } else if (state === FULFILLED) {\n    fulfill(promise, value);\n  } else if (state === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  var resolved = false;\n  try {\n    resolver(function (value) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      resolve(promise, value);\n    }, function (reason) {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nfunction then(onFulfillment, onRejection, label) {\n  var parent = this;\n  var state = parent._state;\n\n  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {\n    config.instrument && instrument('chained', parent, parent);\n    return parent;\n  }\n\n  parent._onError = null;\n\n  var child = new parent.constructor(noop, label);\n  var result = parent._result;\n\n  config.instrument && instrument('chained', parent, child);\n\n  if (state === PENDING) {\n    subscribe(parent, child, onFulfillment, onRejection);\n  } else {\n    var callback = state === FULFILLED ? onFulfillment : onRejection;\n    config.async(function () {\n      return invokeCallback(state, child, callback, result);\n    });\n  }\n\n  return child;\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input, abortOnReject, label) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop, label);\n    this._abortOnReject = abortOnReject;\n    this._isUsingOwnPromise = Constructor === Promise;\n    this._isUsingOwnResolve = Constructor.resolve === resolve$1;\n\n    this._init.apply(this, arguments);\n  }\n\n  Enumerator.prototype._init = function _init(Constructor, input) {\n    var len = input.length || 0;\n    this.length = len;\n    this._remaining = len;\n    this._result = new Array(len);\n\n    this._enumerate(input);\n  };\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    var length = this.length;\n    var promise = this.promise;\n\n    for (var i = 0; promise._state === PENDING && i < length; i++) {\n      this._eachEntry(input[i], i, true);\n    }\n\n    this._checkFullfillment();\n  };\n\n  Enumerator.prototype._checkFullfillment = function _checkFullfillment() {\n    if (this._remaining === 0) {\n      fulfill(this.promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._settleMaybeThenable = function _settleMaybeThenable(entry, i, firstPass) {\n    var c = this._instanceConstructor;\n\n    if (this._isUsingOwnResolve) {\n      var then$$1 = getThen(entry);\n\n      if (then$$1 === then && entry._state !== PENDING) {\n        entry._onError = null;\n        this._settledAt(entry._state, i, entry._result, firstPass);\n      } else if (typeof then$$1 !== 'function') {\n        this._settledAt(FULFILLED, i, entry, firstPass);\n      } else if (this._isUsingOwnPromise) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, then$$1);\n        this._willSettleAt(promise, i, firstPass);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i, firstPass);\n      }\n    } else {\n      this._willSettleAt(c.resolve(entry), i, firstPass);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i, firstPass) {\n    if (entry !== null && typeof entry === 'object') {\n      this._settleMaybeThenable(entry, i, firstPass);\n    } else {\n      this._setResultAt(FULFILLED, i, entry, firstPass);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value, firstPass) {\n    var promise = this.promise;\n\n    if (promise._state === PENDING) {\n      if (this._abortOnReject && state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._setResultAt(state, i, value, firstPass);\n        this._checkFullfillment();\n      }\n    }\n  };\n\n  Enumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n    this._remaining--;\n    this._result[i] = value;\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i, firstPass) {\n    var _this = this;\n\n    subscribe(promise, undefined, function (value) {\n      return _this._settledAt(FULFILLED, i, value, firstPass);\n    }, function (reason) {\n      return _this._settledAt(REJECTED, i, reason, firstPass);\n    });\n  };\n\n  return Enumerator;\n}();\n\nfunction setSettledResult(state, i, value) {\n  this._remaining--;\n  if (state === FULFILLED) {\n    this._result[i] = {\n      state: 'fulfilled',\n      value: value\n    };\n  } else {\n    this._result[i] = {\n      state: 'rejected',\n      reason: value\n    };\n  }\n}\n\n/**\n  `RSVP.Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error(\"2\"));\n  let promise3 = RSVP.reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  RSVP.Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries, label) {\n  if (!Array.isArray(entries)) {\n    return this.reject(new TypeError(\"Promise.all must be called with an array\"), label);\n  }\n  return new Enumerator(this, entries, true /* abort on reject */, label).promise;\n}\n\n/**\n  `RSVP.Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `RSVP.Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new RSVP.Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  RSVP.Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  RSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} entries array of promises to observe\n  @param {String} label optional string for describing the promise returned.\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  var promise = new Constructor(noop, label);\n\n  if (!Array.isArray(entries)) {\n    reject(promise, new TypeError('Promise.race must be called with an array'));\n    return promise;\n  }\n\n  for (var i = 0; promise._state === PENDING && i < entries.length; i++) {\n    subscribe(Constructor.resolve(entries[i]), undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n\n  return promise;\n}\n\n/**\n  `RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new RSVP.Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason, label) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop, label);\n  reject(promise, reason);\n  return promise;\n}\n\nvar guidKey = 'rsvp_' + Date.now() + '-';\nvar counter = 0;\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise’s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class RSVP.Promise\n  @param {function} resolver\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise = function () {\n  function Promise(resolver, label) {\n    this._id = counter++;\n    this._label = label;\n    this._state = undefined;\n    this._result = undefined;\n    this._subscribers = [];\n\n    config.instrument && instrument('created', this);\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  Promise.prototype._onError = function _onError(reason) {\n    var _this = this;\n\n    config.after(function () {\n      if (_this._onError) {\n        config.trigger('error', reason, _this._label);\n      }\n    });\n  };\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn\\'t find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection, label) {\n    return this.then(undefined, onRejection, label);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuthor();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuthor();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @param {String} label optional string for labeling the promise.\n    Useful for tooling.\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback, label) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    }, label);\n  };\n\n  return Promise;\n}();\n\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve$1;\nPromise.reject = reject$1;\n\nPromise.prototype._guidKey = guidKey;\n\n/**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n\n  ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n\n  Chaining\n  --------\n\n  The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n\n  ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n\n  findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we\\'re unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n  ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n\n  Assimilation\n  ------------\n\n  Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n\n  ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n\n  If the assimliated promise rejects, then the downstream promise will also reject.\n\n  ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n\n  Simple Example\n  --------------\n\n  Synchronous Example\n\n  ```javascript\n  let result;\n\n  try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n\n  Errback Example\n\n  ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n\n  Promise Example;\n\n  ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n\n  Advanced Example\n  --------------\n\n  Synchronous Example\n\n  ```javascript\n  let author, books;\n\n  try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n\n  Errback Example\n\n  ```js\n\n  function foundBooks(books) {\n\n  }\n\n  function failure(reason) {\n\n  }\n\n  findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n\n  Promise Example;\n\n  ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n\n  @method then\n  @param {Function} onFulfillment\n  @param {Function} onRejection\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise}\n*/\nPromise.prototype.then = then;\n\nfunction makeObject(_, argumentNames) {\n  var obj = {};\n  var length = _.length;\n  var args = new Array(length);\n\n  for (var x = 0; x < length; x++) {\n    args[x] = _[x];\n  }\n\n  for (var i = 0; i < argumentNames.length; i++) {\n    var name = argumentNames[i];\n    obj[name] = args[i + 1];\n  }\n\n  return obj;\n}\n\nfunction arrayResult(_) {\n  var length = _.length;\n  var args = new Array(length - 1);\n\n  for (var i = 1; i < length; i++) {\n    args[i - 1] = _[i];\n  }\n\n  return args;\n}\n\nfunction wrapThenable(then, promise) {\n  return {\n    then: function (onFulFillment, onRejection) {\n      return then.call(promise, onFulFillment, onRejection);\n    }\n  };\n}\n\n/**\n  `RSVP.denodeify` takes a 'node-style' function and returns a function that\n  will return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\n  browser when you'd prefer to use promises over using callbacks. For example,\n  `denodeify` transforms the following:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) return handleError(err);\n    handleData(data);\n  });\n  ```\n\n  into:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n\n  readFile('myfile.txt').then(handleData, handleError);\n  ```\n\n  If the node function has multiple success parameters, then `denodeify`\n  just returns the first one:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'));\n\n  request('http://example.com').then(function(res) {\n    // ...\n  });\n  ```\n\n  However, if you need all success parameters, setting `denodeify`'s\n  second parameter to `true` causes it to return all success parameters\n  as an array:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), true);\n\n  request('http://example.com').then(function(result) {\n    // result[0] -> res\n    // result[1] -> body\n  });\n  ```\n\n  Or if you pass it an array with names it returns the parameters as a hash:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request'), ['res', 'body']);\n\n  request('http://example.com').then(function(result) {\n    // result.res\n    // result.body\n  });\n  ```\n\n  Sometimes you need to retain the `this`:\n\n  ```javascript\n  let app = require('express')();\n  let render = RSVP.denodeify(app.render.bind(app));\n  ```\n\n  The denodified function inherits from the original function. It works in all\n  environments, except IE 10 and below. Consequently all properties of the original\n  function are available to you. However, any properties you change on the\n  denodeified function won't be changed on the original function. Example:\n\n  ```javascript\n  let request = RSVP.denodeify(require('request')),\n      cookieJar = request.jar(); // <- Inheritance is used here\n\n  request('http://example.com', {jar: cookieJar}).then(function(res) {\n    // cookieJar.cookies holds now the cookies returned by example.com\n  });\n  ```\n\n  Using `denodeify` makes it easier to compose asynchronous operations instead\n  of using callbacks. For example, instead of:\n\n  ```javascript\n  let fs = require('fs');\n\n  fs.readFile('myfile.txt', function(err, data){\n    if (err) { ... } // Handle error\n    fs.writeFile('myfile2.txt', data, function(err){\n      if (err) { ... } // Handle error\n      console.log('done')\n    });\n  });\n  ```\n\n  you can chain the operations together using `then` from the returned promise:\n\n  ```javascript\n  let fs = require('fs');\n  let readFile = RSVP.denodeify(fs.readFile);\n  let writeFile = RSVP.denodeify(fs.writeFile);\n\n  readFile('myfile.txt').then(function(data){\n    return writeFile('myfile2.txt', data);\n  }).then(function(){\n    console.log('done')\n  }).catch(function(error){\n    // Handle error\n  });\n  ```\n\n  @method denodeify\n  @static\n  @for RSVP\n  @param {Function} nodeFunc a 'node-style' function that takes a callback as\n  its last argument. The callback expects an error to be passed as its first\n  argument (if an error occurred, otherwise null), and the value from the\n  operation as its second argument ('function(err, value){ }').\n  @param {Boolean|Array} [options] An optional paramter that if set\n  to `true` causes the promise to fulfill with the callback's success arguments\n  as an array. This is useful if the node function has multiple success\n  paramters. If you set this paramter to an array with names, the promise will\n  fulfill with a hash with these names as keys and the success parameters as\n  values.\n  @return {Function} a function that wraps `nodeFunc` to return an\n  `RSVP.Promise`\n  @static\n*/\nfunction denodeify(nodeFunc, options) {\n  var fn = function () {\n    var l = arguments.length;\n    var args = new Array(l + 1);\n    var promiseInput = false;\n\n    for (var i = 0; i < l; ++i) {\n      var arg = arguments[i];\n\n      if (!promiseInput) {\n        // TODO: clean this up\n        promiseInput = needsPromiseInput(arg);\n        if (promiseInput === TRY_CATCH_ERROR) {\n          var error = TRY_CATCH_ERROR.error;\n          TRY_CATCH_ERROR.error = null;\n          var p = new Promise(noop);\n          reject(p, error);\n          return p;\n        } else if (promiseInput && promiseInput !== true) {\n          arg = wrapThenable(promiseInput, arg);\n        }\n      }\n      args[i] = arg;\n    }\n\n    var promise = new Promise(noop);\n\n    args[l] = function (err, val) {\n      if (err) {\n        reject(promise, err);\n      } else if (options === undefined) {\n        resolve(promise, val);\n      } else if (options === true) {\n        resolve(promise, arrayResult(arguments));\n      } else if (Array.isArray(options)) {\n        resolve(promise, makeObject(arguments, options));\n      } else {\n        resolve(promise, val);\n      }\n    };\n\n    if (promiseInput) {\n      return handlePromiseInput(promise, args, nodeFunc, this);\n    } else {\n      return handleValueInput(promise, args, nodeFunc, this);\n    }\n  };\n\n  fn.__proto__ = nodeFunc;\n\n  return fn;\n}\n\nfunction handleValueInput(promise, args, nodeFunc, self) {\n  var result = tryCatch(nodeFunc).apply(self, args);\n  if (result === TRY_CATCH_ERROR) {\n    var error = TRY_CATCH_ERROR.error;\n    TRY_CATCH_ERROR.error = null;\n    reject(promise, error);\n  }\n  return promise;\n}\n\nfunction handlePromiseInput(promise, args, nodeFunc, self) {\n  return Promise.all(args).then(function (args) {\n    return handleValueInput(promise, args, nodeFunc, self);\n  });\n}\n\nfunction needsPromiseInput(arg) {\n  if (arg !== null && typeof arg === 'object') {\n    if (arg.constructor === Promise) {\n      return true;\n    } else {\n      return getThen(arg);\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.all`.\n\n  @method all\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n*/\nfunction all$1(array, label) {\n  return Promise.all(array, label);\n}\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar AllSettled = function (_Enumerator) {\n  _inherits(AllSettled, _Enumerator);\n\n  function AllSettled(Constructor, entries, label) {\n    return _possibleConstructorReturn(this, _Enumerator.call(this, Constructor, entries, false /* don't abort on reject */, label));\n  }\n\n  return AllSettled;\n}(Enumerator);\n\nAllSettled.prototype._setResultAt = setSettledResult;\n\n/**\n`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\n Returns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\n Each state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n ```javascript\n{ state: 'fulfilled', value: value }\n  or\n{ state: 'rejected', reason: reason }\n```\n Example:\n ```javascript\nlet promise1 = RSVP.Promise.resolve(1);\nlet promise2 = RSVP.Promise.reject(new Error('2'));\nlet promise3 = RSVP.Promise.reject(new Error('3'));\nlet promises = [ promise1, promise2, promise3 ];\n RSVP.allSettled(promises).then(function(array){\n  // array == [\n  //   { state: 'fulfilled', value: 1 },\n  //   { state: 'rejected', reason: Error },\n  //   { state: 'rejected', reason: Error }\n  // ]\n  // Note that for the second item, reason.message will be '2', and for the\n  // third item, reason.message will be '3'.\n}, function(error) {\n  // Not run. (This block would only be called if allSettled had failed,\n  // for instance if passed an incorrect argument type.)\n});\n```\n @method allSettled\n@static\n@for RSVP\n@param {Array} entries\n@param {String} label - optional string that describes the promise.\nUseful for tooling.\n@return {Promise} promise that is fulfilled with an array of the settled\nstates of the constituent promises.\n*/\n\nfunction allSettled(entries, label) {\n  if (!Array.isArray(entries)) {\n    return Promise.reject(new TypeError(\"Promise.allSettled must be called with an array\"), label);\n  }\n\n  return new AllSettled(Promise, entries, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.race`.\n\n  @method race\n  @static\n  @for RSVP\n  @param {Array} array Array of promises.\n  @param {String} label An optional label. This is useful\n  for tooling.\n */\nfunction race$1(array, label) {\n  return Promise.race(array, label);\n}\n\nfunction _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$1(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar PromiseHash = function (_Enumerator) {\n  _inherits$1(PromiseHash, _Enumerator);\n\n  function PromiseHash(Constructor, object) {\n    var abortOnReject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var label = arguments[3];\n    return _possibleConstructorReturn$1(this, _Enumerator.call(this, Constructor, object, abortOnReject, label));\n  }\n\n  PromiseHash.prototype._init = function _init(Constructor, object) {\n    this._result = {};\n\n    this._enumerate(object);\n    if (this._remaining === 0) {\n      fulfill(this.promise, this._result);\n    }\n  };\n\n  PromiseHash.prototype._enumerate = function _enumerate(input) {\n    var promise = this.promise;\n    var results = [];\n\n    for (var key in input) {\n      if (hasOwnProperty.call(input, key)) {\n        results.push({\n          position: key,\n          entry: input[key]\n        });\n      }\n    }\n\n    var length = results.length;\n    this._remaining = length;\n    var result = void 0;\n\n    for (var i = 0; promise._state === PENDING && i < length; i++) {\n      result = results[i];\n      this._eachEntry(result.entry, result.position);\n    }\n  };\n\n  return PromiseHash;\n}(Enumerator);\n\n/**\n  `RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\n  for its `promises` argument.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  fulfilled, or rejected if any of them become rejected. The returned promise\n  is fulfilled with a hash that has the same key names as the `promises` object\n  argument. If any of the values in the object are not promises, they will\n  simply be copied over to the fulfilled object.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    yourPromise: RSVP.resolve(2),\n    theirPromise: RSVP.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: 1,\n    //   yourPromise: 2,\n    //   theirPromise: 3,\n    //   notAPromise: 4\n    // }\n  });\n  ````\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the first promise\n  that is rejected will be given as the reason to the rejection handler.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.resolve(1),\n    rejectedPromise: RSVP.reject(new Error('rejectedPromise')),\n    anotherRejectedPromise: RSVP.reject(new Error('anotherRejectedPromise')),\n  };\n\n  RSVP.hash(promises).then(function(hash){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === 'rejectedPromise'\n  });\n  ```\n\n  An important note: `RSVP.hash` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hash` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hash(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: 'Example'\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hash\n  @static\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all properties of `promises`\n  have been fulfilled, or rejected if any of them become rejected.\n*/\nfunction hash(object, label) {\n  if (object === null || typeof object !== 'object') {\n    return Promise.reject(new TypeError(\"Promise.hash must be called with an object\"), label);\n  }\n\n  return new PromiseHash(Promise, object, label).promise;\n}\n\nfunction _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$2(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar HashSettled = function (_PromiseHash) {\n  _inherits$2(HashSettled, _PromiseHash);\n\n  function HashSettled(Constructor, object, label) {\n    return _possibleConstructorReturn$2(this, _PromiseHash.call(this, Constructor, object, false, label));\n  }\n\n  return HashSettled;\n}(PromiseHash);\n\nHashSettled.prototype._setResultAt = setSettledResult;\n\n/**\n  `RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\n  instead of an array for its `promises` argument.\n\n  Unlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\n  but like `RSVP.allSettled`, `hashSettled` waits until all the\n  constituent promises have returned and then shows you all the results\n  with their states and values/reasons. This is useful if you want to\n  handle multiple promises' failure states together as a set.\n\n  Returns a promise that is fulfilled when all the given promises have been\n  settled, or rejected if the passed parameters are invalid.\n\n  The returned promise is fulfilled with a hash that has the same key names as\n  the `promises` object argument. If any of the values in the object are not\n  promises, they will be copied over to the fulfilled object and marked with state\n  'fulfilled'.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    yourPromise: RSVP.Promise.resolve(2),\n    theirPromise: RSVP.Promise.resolve(3),\n    notAPromise: 4\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise: { state: 'fulfilled', value: 1 },\n    //   yourPromise: { state: 'fulfilled', value: 2 },\n    //   theirPromise: { state: 'fulfilled', value: 3 },\n    //   notAPromise: { state: 'fulfilled', value: 4 }\n    // }\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.hash` are rejected, the state will\n  be set to 'rejected' and the reason for rejection provided.\n\n  Example:\n\n  ```javascript\n  let promises = {\n    myPromise: RSVP.Promise.resolve(1),\n    rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n    anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n  };\n\n  RSVP.hashSettled(promises).then(function(hash){\n    // hash here is an object that looks like:\n    // {\n    //   myPromise:              { state: 'fulfilled', value: 1 },\n    //   rejectedPromise:        { state: 'rejected', reason: Error },\n    //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n    // }\n    // Note that for rejectedPromise, reason.message == 'rejection',\n    // and for anotherRejectedPromise, reason.message == 'more rejection'.\n  });\n  ```\n\n  An important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\n  are just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\n  chains.\n\n  Example:\n\n  ```javascript\n  function MyConstructor(){\n    this.example = RSVP.Promise.resolve('Example');\n  }\n\n  MyConstructor.prototype = {\n    protoProperty: RSVP.Promise.resolve('Proto Property')\n  };\n\n  let myObject = new MyConstructor();\n\n  RSVP.hashSettled(myObject).then(function(hash){\n    // protoProperty will not be present, instead you will just have an\n    // object that looks like:\n    // {\n    //   example: { state: 'fulfilled', value: 'Example' }\n    // }\n    //\n    // hash.hasOwnProperty('protoProperty'); // false\n    // 'undefined' === typeof hash.protoProperty\n  });\n  ```\n\n  @method hashSettled\n  @for RSVP\n  @param {Object} object\n  @param {String} label optional string that describes the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when when all properties of `promises`\n  have been settled.\n  @static\n*/\n\nfunction hashSettled(object, label) {\n  if (object === null || typeof object !== 'object') {\n    return Promise.reject(new TypeError(\"RSVP.hashSettled must be called with an object\"), label);\n  }\n\n  return new HashSettled(Promise, object, false, label).promise;\n}\n\n/**\n  `RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\n  loop in order to aid debugging.\n\n  Promises A+ specifies that any exceptions that occur with a promise must be\n  caught by the promises implementation and bubbled to the last handler. For\n  this reason, it is recommended that you always specify a second rejection\n  handler function to `then`. However, `RSVP.rethrow` will throw the exception\n  outside of the promise, so it bubbles up to your console if in the browser,\n  or domain/cause uncaught exception in Node. `rethrow` will also throw the\n  error again so the error can be handled by the promise per the spec.\n\n  ```javascript\n  function throws(){\n    throw new Error('Whoops!');\n  }\n\n  let promise = new RSVP.Promise(function(resolve, reject){\n    throws();\n  });\n\n  promise.catch(RSVP.rethrow).then(function(){\n    // Code here doesn't run because the promise became rejected due to an\n    // error!\n  }, function (err){\n    // handle the error here\n  });\n  ```\n\n  The 'Whoops' error will be thrown on the next turn of the event loop\n  and you can watch for it in your console. You can also handle it using a\n  rejection handler given to `.then` or `.catch` on the returned promise.\n\n  @method rethrow\n  @static\n  @for RSVP\n  @param {Error} reason reason the promise became rejected.\n  @throws Error\n  @static\n*/\nfunction rethrow(reason) {\n  setTimeout(function () {\n    throw reason;\n  });\n  throw reason;\n}\n\n/**\n  `RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n  `RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\n  interface. New code should use the `RSVP.Promise` constructor instead.\n\n  The object returned from `RSVP.defer` is a plain object with three properties:\n\n  * promise - an `RSVP.Promise`.\n  * reject - a function that causes the `promise` property on this object to\n    become rejected\n  * resolve - a function that causes the `promise` property on this object to\n    become fulfilled.\n\n  Example:\n\n   ```javascript\n   let deferred = RSVP.defer();\n\n   deferred.resolve(\"Success!\");\n\n   deferred.promise.then(function(value){\n     // value here is \"Success!\"\n   });\n   ```\n\n  @method defer\n  @static\n  @for RSVP\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Object}\n */\n\nfunction defer(label) {\n  var deferred = { resolve: undefined, reject: undefined };\n\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  }, label);\n\n  return deferred;\n}\n\nfunction _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$3(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MapEnumerator = function (_Enumerator) {\n  _inherits$3(MapEnumerator, _Enumerator);\n\n  function MapEnumerator(Constructor, entries, mapFn, label) {\n    return _possibleConstructorReturn$3(this, _Enumerator.call(this, Constructor, entries, true, label, mapFn));\n  }\n\n  MapEnumerator.prototype._init = function _init(Constructor, input, bool, label, mapFn) {\n    var len = input.length || 0;\n    this.length = len;\n    this._remaining = len;\n    this._result = new Array(len);\n    this._mapFn = mapFn;\n\n    this._enumerate(input);\n  };\n\n  MapEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n    if (firstPass) {\n      var val = tryCatch(this._mapFn)(value, i);\n      if (val === TRY_CATCH_ERROR) {\n        this._settledAt(REJECTED, i, val.error, false);\n      } else {\n        this._eachEntry(val, i, false);\n      }\n    } else {\n      this._remaining--;\n      this._result[i] = value;\n    }\n  };\n\n  return MapEnumerator;\n}(Enumerator);\n\n/**\n `RSVP.map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called\n  meaning that as soon as any promise resolves its value will be passed to `mapFn`.\n  `RSVP.map` returns a promise that will become fulfilled with the result of running\n  `mapFn` on the values the promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(result){\n    // result is [ 2, 3, 4 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.map` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let mapFn = function(item){\n    return item + 1;\n  };\n\n  RSVP.map(promises, mapFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n  say you want to get all comments from a set of blog posts, but you need\n  the blog posts first because they contain a url to those comments.\n\n  ```javscript\n\n  let mapFn = function(blogPost){\n    // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n    // with some comments data\n    return getComments(blogPost.comments_url);\n  };\n\n  // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n  // with some blog post data\n  RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n    // comments is the result of asking the server for the comments\n    // of all blog posts returned from getBlogPosts()\n  });\n  ```\n\n  @method map\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} mapFn function to be called on each fulfilled promise.\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled with the result of calling\n  `mapFn` on each fulfilled promise or value when they become fulfilled.\n   The promise will be rejected if any of the given `promises` become rejected.\n  @static\n*/\n\n\nfunction map(promises, mapFn, label) {\n  if (!Array.isArray(promises)) {\n    return Promise.reject(new TypeError(\"RSVP.map must be called with an array\"), label);\n  }\n\n  if (typeof mapFn !== 'function') {\n    return Promise.reject(new TypeError(\"RSVP.map expects a function as a second argument\"), label);\n  }\n\n  return new MapEnumerator(Promise, promises, mapFn, label).promise;\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.resolve`.\n\n  @method resolve\n  @static\n  @for RSVP\n  @param {*} value value that the returned promise will be resolved with\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$2(value, label) {\n  return Promise.resolve(value, label);\n}\n\n/**\n  This is a convenient alias for `RSVP.Promise.reject`.\n\n  @method reject\n  @static\n  @for RSVP\n  @param {*} reason value that the returned promise will be rejected with.\n  @param {String} label optional string for identifying the returned promise.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$2(reason, label) {\n  return Promise.reject(reason, label);\n}\n\nfunction _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits$4(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EMPTY_OBJECT = {};\n\nvar FilterEnumerator = function (_Enumerator) {\n  _inherits$4(FilterEnumerator, _Enumerator);\n\n  function FilterEnumerator(Constructor, entries, filterFn, label) {\n    return _possibleConstructorReturn$4(this, _Enumerator.call(this, Constructor, entries, true, label, filterFn));\n  }\n\n  FilterEnumerator.prototype._init = function _init(Constructor, input, bool, label, filterFn) {\n    var len = input.length || 0;\n    this.length = len;\n    this._remaining = len;\n\n    this._result = new Array(len);\n    this._filterFn = filterFn;\n\n    this._enumerate(input);\n  };\n\n  FilterEnumerator.prototype._checkFullfillment = function _checkFullfillment() {\n    if (this._remaining === 0) {\n      this._result = this._result.filter(function (val) {\n        return val !== EMPTY_OBJECT;\n      });\n      fulfill(this.promise, this._result);\n    }\n  };\n\n  FilterEnumerator.prototype._setResultAt = function _setResultAt(state, i, value, firstPass) {\n    if (firstPass) {\n      this._result[i] = value;\n      var val = tryCatch(this._filterFn)(value, i);\n      if (val === TRY_CATCH_ERROR) {\n        this._settledAt(REJECTED, i, val.error, false);\n      } else {\n        this._eachEntry(val, i, false);\n      }\n    } else {\n      this._remaining--;\n      if (!value) {\n        this._result[i] = EMPTY_OBJECT;\n      }\n    }\n  };\n\n  return FilterEnumerator;\n}(Enumerator);\n\n/**\n `RSVP.filter` is similar to JavaScript's native `filter` method.\n `filterFn` is eagerly called meaning that as soon as any promise\n  resolves its value will be passed to `filterFn`. `RSVP.filter` returns\n  a promise that will become fulfilled with the result of running\n  `filterFn` on the values the promises become fulfilled with.\n\n  For example:\n\n  ```javascript\n\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.resolve(2);\n  let promise3 = RSVP.resolve(3);\n\n  let promises = [promise1, promise2, promise3];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(result){\n    // result is [ 2, 3 ]\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promise's\n  rejection handler. For example:\n\n  ```javascript\n  let promise1 = RSVP.resolve(1);\n  let promise2 = RSVP.reject(new Error('2'));\n  let promise3 = RSVP.reject(new Error('3'));\n  let promises = [ promise1, promise2, promise3 ];\n\n  let filterFn = function(item){\n    return item > 1;\n  };\n\n  RSVP.filter(promises, filterFn).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(reason) {\n    // reason.message === '2'\n  });\n  ```\n\n  `RSVP.filter` will also wait for any promises returned from `filterFn`.\n  For instance, you may want to fetch a list of users then return a subset\n  of those users based on some asynchronous operation:\n\n  ```javascript\n\n  let alice = { name: 'alice' };\n  let bob   = { name: 'bob' };\n  let users = [ alice, bob ];\n\n  let promises = users.map(function(user){\n    return RSVP.resolve(user);\n  });\n\n  let filterFn = function(user){\n    // Here, Alice has permissions to create a blog post, but Bob does not.\n    return getPrivilegesForUser(user).then(function(privs){\n      return privs.can_create_blog_post === true;\n    });\n  };\n  RSVP.filter(promises, filterFn).then(function(users){\n    // true, because the server told us only Alice can create a blog post.\n    users.length === 1;\n    // false, because Alice is the only user present in `users`\n    users[0] === bob;\n  });\n  ```\n\n  @method filter\n  @static\n  @for RSVP\n  @param {Array} promises\n  @param {Function} filterFn - function to be called on each resolved value to\n  filter the final results.\n  @param {String} label optional string describing the promise. Useful for\n  tooling.\n  @return {Promise}\n*/\n\nfunction filter(promises, filterFn, label) {\n  if (typeof filterFn !== 'function') {\n    return Promise.reject(new TypeError(\"RSVP.filter expects function as a second argument\"), label);\n  }\n\n  return Promise.resolve(promises, label).then(function (promises) {\n    if (!Array.isArray(promises)) {\n      throw new TypeError(\"RSVP.filter must be called with an array\");\n    }\n    return new FilterEnumerator(Promise, promises, filterFn, label).promise;\n  });\n}\n\nvar len = 0;\nvar vertxNext = void 0;\nfunction asap(callback, arg) {\n  queue$1[len] = callback;\n  queue$1[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 1, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    scheduleFlush$1();\n  }\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  var nextTick = process.nextTick;\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // setImmediate should be used instead instead\n  var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n    nextTick = setImmediate;\n  }\n  return function () {\n    return nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    return node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  return function () {\n    return setTimeout(flush, 1);\n  };\n}\n\nvar queue$1 = new Array(1000);\n\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue$1[i];\n    var arg = queue$1[i + 1];\n\n    callback(arg);\n\n    queue$1[i] = undefined;\n    queue$1[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertex() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush$1 = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush$1 = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush$1 = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush$1 = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush$1 = attemptVertex();\n} else {\n  scheduleFlush$1 = useSetTimeout();\n}\n\nvar _asap$Promise$EventTa;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// defaults\nconfig.async = asap;\nconfig.after = function (cb) {\n  return setTimeout(cb, 0);\n};\n\nvar async = function (callback, arg) {\n  return config.async(callback, arg);\n};\n\nfunction on() {\n  config['on'].apply(config, arguments);\n}\n\nfunction off() {\n  config['off'].apply(config, arguments);\n}\n\n// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\nif (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n  var callbacks = window['__PROMISE_INSTRUMENTATION__'];\n  configure('instrument', true);\n  for (var eventName in callbacks) {\n    if (callbacks.hasOwnProperty(eventName)) {\n      on(eventName, callbacks[eventName]);\n    }\n  }\n}\n\n// the default export here is for backwards compat:\n//   https://github.com/tildeio/rsvp.js/issues/434\nvar rsvp = (_asap$Promise$EventTa = {\n  asap: asap,\n  Promise: Promise,\n  EventTarget: EventTarget,\n  all: all$1,\n  allSettled: allSettled,\n  race: race$1,\n  hash: hash,\n  hashSettled: hashSettled,\n  rethrow: rethrow,\n  defer: defer,\n  denodeify: denodeify,\n  configure: configure,\n  on: on,\n  off: off,\n  resolve: resolve$2,\n  reject: reject$2,\n  map: map\n}, _defineProperty(_asap$Promise$EventTa, 'async', async), _defineProperty(_asap$Promise$EventTa, 'filter', filter), _asap$Promise$EventTa);\n\nexport { asap, Promise, EventTarget, all$1 as all, allSettled, race$1 as race, hash, hashSettled, rethrow, defer, denodeify, configure, on, off, resolve$2 as resolve, reject$2 as reject, map, async, filter };\nexport default rsvp;\n\n//# sourceMappingURL=rsvp.es.map\n","!function(globals) {\n'use strict'\n\nvar _imports = {}\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  _imports.bytesToHex = require('convert-hex').bytesToHex\n  _imports.convertString = require('convert-string')\n  module.exports = sha256\n} else {\n  _imports.bytesToHex = globals.convertHex.bytesToHex\n  _imports.convertString = globals.convertString\n  globals.sha256 = sha256\n}\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\n// Initialization round constants tables\nvar K = []\n\n// Compute constants\n!function () {\n  function isPrime(n) {\n    var sqrtN = Math.sqrt(n);\n    for (var factor = 2; factor <= sqrtN; factor++) {\n      if (!(n % factor)) return false\n    }\n\n    return true\n  }\n\n  function getFractionalBits(n) {\n    return ((n - (n | 0)) * 0x100000000) | 0\n  }\n\n  var n = 2\n  var nPrime = 0\n  while (nPrime < 64) {\n    if (isPrime(n)) {\n      K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3))\n      nPrime++\n    }\n\n    n++\n  }\n}()\n\nvar bytesToWords = function (bytes) {\n  var words = []\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n    words[b >>> 5] |= bytes[i] << (24 - b % 32)\n  }\n  return words\n}\n\nvar wordsToBytes = function (words) {\n  var bytes = []\n  for (var b = 0; b < words.length * 32; b += 8) {\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)\n  }\n  return bytes\n}\n\n// Reusable object\nvar W = []\n\nvar processBlock = function (H, M, offset) {\n  // Working variables\n  var a = H[0], b = H[1], c = H[2], d = H[3]\n  var e = H[4], f = H[5], g = H[6], h = H[7]\n\n    // Computation\n  for (var i = 0; i < 64; i++) {\n    if (i < 16) {\n      W[i] = M[offset + i] | 0\n    } else {\n      var gamma0x = W[i - 15]\n      var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n                    ((gamma0x << 14) | (gamma0x >>> 18)) ^\n                    (gamma0x >>> 3)\n\n      var gamma1x = W[i - 2];\n      var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n                    ((gamma1x << 13) | (gamma1x >>> 19)) ^\n                    (gamma1x >>> 10)\n\n      W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n    }\n\n    var ch  = (e & f) ^ (~e & g);\n    var maj = (a & b) ^ (a & c) ^ (b & c);\n\n    var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n    var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n    var t1 = h + sigma1 + ch + K[i] + W[i];\n    var t2 = sigma0 + maj;\n\n    h = g;\n    g = f;\n    f = e;\n    e = (d + t1) | 0;\n    d = c;\n    c = b;\n    b = a;\n    a = (t1 + t2) | 0;\n  }\n\n  // Intermediate hash value\n  H[0] = (H[0] + a) | 0;\n  H[1] = (H[1] + b) | 0;\n  H[2] = (H[2] + c) | 0;\n  H[3] = (H[3] + d) | 0;\n  H[4] = (H[4] + e) | 0;\n  H[5] = (H[5] + f) | 0;\n  H[6] = (H[6] + g) | 0;\n  H[7] = (H[7] + h) | 0;\n}\n\nfunction sha256(message, options) {;\n  if (message.constructor === String) {\n    message = _imports.convertString.UTF8.stringToBytes(message);\n  }\n\n  var H =[ 0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n           0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19 ];\n\n  var m = bytesToWords(message);\n  var l = message.length * 8;\n\n  m[l >> 5] |= 0x80 << (24 - l % 32);\n  m[((l + 64 >> 9) << 4) + 15] = l;\n\n  for (var i=0 ; i<m.length; i += 16) {\n    processBlock(H, m, i);\n  }\n\n  var digestbytes = wordsToBytes(H);\n  return options && options.asBytes ? digestbytes :\n         options && options.asString ? _imports.convertString.bytesToString(digestbytes) :\n         _imports.bytesToHex(digestbytes)\n}\n\nsha256.x2 = function(message, options) {\n  return sha256(sha256(message, { asBytes:true }), options)\n}\n\n}(this);\n","import RSVP from 'rsvp';\nimport sha256 from 'sha256';\nimport qz from 'qz-tray';\n\nwindow.RSVP = RSVP;\n\nconst defaults = {\n  printer: 'Zebra-Technologies-ZTC-ZT230-200dpi-ZP',\n  settings: {}\n};\n\nexport default class qzPrinty {\n\tconstructor(options) {\n\t\tthis.options = Object.assign({}, defaults, options);\n\t\tthis.init();\n\n    return {\n      print: this.print.bind(this)\n    }\n\t}\n\tinit() {\n    if (!this.config) {\n      qz.api.setSha256Type(function(data) {\n        return sha256(data);\n      });\n\n      this.config = qz.configs.create(this.options.printer, this.options.settings);\n    }\n\t}\n\tprint(input, type = 'html') {\n\t\tlet self = this;\n\n    let format = 'plain';\n    if (type === 'pdf') format = 'file';\n\n    if (!qz.websocket.isActive()) {\n      qz.websocket.connect().then(function() { \n        self.print(input, type);\n      }).catch(function(err) { console.log(err); });\n    } else {\n      if (Array.isArray(input)) {\n        input.forEach(async (el) => {\n          let data = [{\n            type: type,\n            format,\n            data: el\n          }];\n          await qz.print(this.config, data).catch(function(e) {\n            console.error(e);\n          });\n        })\n      } else {\n        let data = [{\n          type: type,\n          format,\n          data: input\n        }];\n        qz.print(this.config, data).catch(function(e) {\n          console.error(e);\n        });\n      }\n    }\n  }\n}\n ","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","!function(globals) {\n'use strict'\n\nvar convertHex = {\n  bytesToHex: function(bytes) {\n    /*if (typeof bytes.byteLength != 'undefined') {\n      var newBytes = []\n\n      if (typeof bytes.buffer != 'undefined')\n        bytes = new DataView(bytes.buffer)\n      else\n        bytes = new DataView(bytes)\n\n      for (var i = 0; i < bytes.byteLength; ++i) {\n        newBytes.push(bytes.getUint8(i))\n      }\n      bytes = newBytes\n    }*/\n    return arrBytesToHex(bytes)\n  },\n  hexToBytes: function(hex) {\n    if (hex.length % 2 === 1) throw new Error(\"hexToBytes can't have a string with an odd number of characters.\")\n    if (hex.indexOf('0x') === 0) hex = hex.slice(2)\n    return hex.match(/../g).map(function(x) { return parseInt(x,16) })\n  }\n}\n\n\n// PRIVATE\n\nfunction arrBytesToHex(bytes) {\n  return bytes.map(function(x) { return padLeft(x.toString(16),2) }).join('')\n}\n\nfunction padLeft(orig, len) {\n  if (orig.length > len) return orig\n  return Array(len - orig.length + 1).join('0') + orig\n}\n\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = convertHex\n} else {\n  globals.convertHex = convertHex\n}\n\n}(this);","!function(globals) {\n'use strict'\n\nvar convertString = {\n  bytesToString: function(bytes) {\n    return bytes.map(function(x){ return String.fromCharCode(x) }).join('')\n  },\n  stringToBytes: function(str) {\n    return str.split('').map(function(x) { return x.charCodeAt(0) })\n  }\n}\n\n//http://hossa.in/2012/07/20/utf-8-in-javascript.html\nconvertString.UTF8 = {\n   bytesToString: function(bytes) {\n    return decodeURIComponent(escape(convertString.bytesToString(bytes)))\n  },\n  stringToBytes: function(str) {\n   return convertString.stringToBytes(unescape(encodeURIComponent(str)))\n  }\n}\n\nif (typeof module !== 'undefined' && module.exports) { //CommonJS\n  module.exports = convertString\n} else {\n  globals.convertString = convertString\n}\n\n}(this);"],"sourceRoot":""}